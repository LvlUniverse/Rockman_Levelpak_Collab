<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playMusic('Mega_Man_1GB.GBS', "VGM", 0, 0, 0, 0, 1);

canProceed = true;
drawtext = 0;

option = 0;
options = 2;

wait = 16;

sx = 0;

demoTimer = 0;

// reset all game state
engineConfig();
freshSaveFile();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canProceed)
{
    drawtext = 1;
    
    if (wait)
    {
        wait -= 1;
        exit;
    }
    
    /*
    if ((demoTimer++) mod 500 == 495)
    {
        if (!recordInputPlayback('Recordings/movtest.mrc'))
            //choose("Recordings/demoPharaohMan.mrc",
            //"Recordings/demoHoneyWoman.mrc")))
            canProceed = false;
        exit;
    }
    */
    
    dir = global.keyDownPressed[0] - global.keyUpPressed[0];
    if (dir != 0)
    {
        demoTimer = 0;
        option += dir;
        if (option == -1)
        {
            option = options - 1;
        }
        if (option == options)
        {
            option = 0;
        }
        playSFX(sfxTextBox);
    }
    
    
    if (global.keyPausePressed[0])
    {
        demoTimer = 0;
        switch (option)
        {
            case 0: // Start 
                canProceed = false;
                playSFX(sfxMenuSelect);
                global.nextRoom = rmRoomSelect;
                break;
            case 1: // Options 
                canProceed = false;
                playSFX(sfxMenuSelect);
                global.nextRoom = rmOptions;
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var oldCol = draw_get_color();
draw_set_color(c_white);

draw_set_valign(fa_top);
draw_set_halign(fa_left);

sx += 1/3;
for(var i = 0; i &lt;= view_hview; i += 120)
{
    for(var j = (sx mod 120) - 120; j &lt;= view_wview; j += 120)
    {
        draw_background(bgArcadeCarpet, view_xview + j, view_yview + i);
    }
}

draw_rectangle_colour(96 - 12 - 4, 164 - 4, 176 + 2, 164 + 23 + 3,
    c_black, c_black, c_black, c_black, false);

if (drawtext)
{
    draw_text(96, 164, "GAME START##OPTIONS");
}
if (canProceed)
{
    draw_sprite(sprOptionsCursor, 0, 96 - 12, 164 + (option * 16));
}

draw_set_color(oldCol);

// colored text overlay
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    draw_rectangle(96 - 12 - 4, 164 - 4, 176 + 2, 164 + 23 + 3, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
