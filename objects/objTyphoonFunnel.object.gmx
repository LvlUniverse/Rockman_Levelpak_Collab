<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTyphoonFunnelNoBlack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///a tropical storm that extends the height of the screen.
event_inherited();

bulletLimitCost = 1;
despawnRange = -1;

contactDamage = 1;
attackDelay = 12;

penetrate = 0;
pierces = 2;

xspeed = 0;
yspeed = 0;
grav = 0;

image_speed = 1/4;

//object-specific
expandDown = 16;
expandUp = 16;
disperse = 0;
fastDisperse = false;

trueY = ystart;
pxspeed = 0;

isWater = false;
waveWidth = 6;

animTimer = 0;
deflectSoundTimer = 0;

gravLock = undefined;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    var wID = global.weaponID[? objTyphoonFunnel];

    //can be realeased manually by letting go of fire,
    //and is released automatically if player hits ground or is missing
    if (!instance_exists(parent) || !global.keyShoot[parent.playerID]
        || parent.ground || parent.climbing || (parent.inWater &amp;&amp; parent.isHit)) 
        &amp;&amp; disperse == 0
    {
        disperse = 1;
        xspeed = pxspeed;
    }
    
    //animate
    animTimer++;
    deflectSoundTimer++;
    
    //expand outwards
    expandDown = min(expandDown + 8, 300);
    expandUp = min(expandUp + 8, 300);
    image_yscale = (expandUp + expandDown) / sprite_get_height(sprite_index);
    
    //power up if we make contact with water
    if !isWater &amp;&amp; place_meeting(x, y, objWater)
    {
        sprite_index = sprTyphoonFunnelWaterNoBlack;
        attackDelay = 8;
        waveWidth = 12;
        isWater = true;
    }
    
    //while being held by parent...
    if disperse &lt;= 0
    {
        //follow parent
        pxspeed = parent.x - x;
        x = parent.x;
        y = parent.y + ((expandUp - expandDown) / 2);
        trueY = parent.y;
        //force player into shooting pose
        parent.shootTimer = 14;
        
        if !parent.inWater || global.ammo[playerID, wID] == 0
        {   //slowfall
            //slow parent's fall if they're out of water
            if parent.yspeed * parent.gravDir &gt; 0.5
                parent.yspeed = 0.5 * sign(parent.gravDir);
        }
        else    //i.e. if parent.inWater &amp;&amp; global.ammo[playerID, wID] != 0
        {
            //increased horizontal movement, and free vertical movement
            var ydir = global.keyDown[playerID] - global.keyUp[playerID];
            var xdir = global.keyRight[playerID] - global.keyLeft[playerID];
            //keep player from leaving water vertically
            if ydir != 0 &amp;&amp; ydir != parent.gravDir
            {
                with(parent)
                {
                    if !instance_place(x, y + ydir + ((bbox_top - bbox_bottom) * gravDir), objWater)
                        ydir = 0;
                }
            }
            parent.yspeed = ydir * 1.5;
            with(parent)
                shiftObject(xdir, 0, true);
            //but! it drains energy passively
            global.ammo[playerID, wID] -= 0.04 / (global.energySaver + 1);
            if global.ammo[playerID, wID] == 0      //keeps the hud from showing you have 1 use left when you run out
                global.ammo[playerID, wID] = 0;
        }
    }
    else //while not following parent...
    {   
        //disperse
        if fastDisperse
            disperse += 12; //disperse fast if another typhoon has been fired
        else
            disperse += 1.5;
        y = trueY + ((expandUp - expandDown) / 2);
        //die if disperse exceeds expand
        if disperse &gt; expandUp &amp;&amp; disperse &gt; expandDown
            instance_destroy();
        //die if no damaging part of the typhoon is onscreen
        else if trueY - disperse &lt; view_yview 
            &amp;&amp; trueY + disperse &gt; view_yview + view_hview
            instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///while equipped...

//fire when shot
if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    var i = fireWeapon(0, 0, objTyphoonFunnel, 2, 2, 2, 0);
    if instance_exists(i)
    {
        //tell existing funnels, if any, to disperse quickly
        with(objTyphoonFunnel)
        {
            if id != i.id
            {
                if !fastDisperse
                    fastDisperse = true;
                else
                    instance_destroy();
            }
        }
        //dismount a ladder if we're on one
        //if the player could use this on a ladder, they could hold one shot indefinitely on it
        if(climbing)
        {
            climbing = false;
            climbLock = lockPoolRelease(climbLock);
            shootStandStillLock = lockPoolRelease(shootStandStillLock);
            if xDir != 0
                image_xscale = sign(xDir);
            else
                image_xscale = ladderXScale;
        }
        //sound
        playSFX(sfxTyphoonFunnelLoop);
        i.pxspeed = xspeed;
        i.image_xscale = 1.2;   //slightly wide hitbox
        i.x = x;
        i.y = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///doesn't hit in empty sections, does extra damage to 2hp enemies

//doesn't do damage if the enemy isn't touching the actual attack
if disperse != 0
{
    if (other.bbox_top &gt; trueY - disperse) 
        &amp;&amp; (other.bbox_bottom &lt; trueY + disperse)
    {
        global.damage = -1;
        exit;
    }
}

//extra damage to 2hp enemies
if (other.healthpointsStart &lt;= 2)
    global.damage = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon setup
weaponSetup("TYPHOON FUNNEL", 
    make_color_rgb(55, 126, 134), 
    make_color_rgb(184, 248, 216), 
    sprWeaponIconsTyphoonFunnel, 2, 
        " You summon a tall, narrow tropical storm. The storm will follow your movement and slow your fall, until you let go of FIRE or land on the ground.## The typhoon becomes stronger when it sucks up water, and allows free movement in water at an energy cost.",
        "1#-#1#2");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deflection, pierces flying enemies' shields

//if the enemy is 'flying' and not invincible, force them to toake damage anyways
//note: guardCancel of 2 doesn't trigger the deflect event at all, so we don't need to account for it
if guardCancel != 4 &amp;&amp; (hasCategory(other.category, "flying") || hasCategory(other.category, "floating"))
{
    penetrate = 3;
    entityEntityCollision();
    penetrate = 0;
    exit;
}

var hitDir = (other.bbox_top &gt; trueY) - (other.bbox_bottom &lt; trueY)
if hitDir != 0
{
    //deflect sound
    if deflectSoundTimer &gt;= attackDelay
        &amp;&amp; (hitDir == -1 || disperse &lt; expandUp)    //don't play deflect sounds if there isn't any tornado there getting deflected
        &amp;&amp; (hitDir == 1 || disperse &lt; expandDown)
    {
        playSFX(sfxReflect);
        deflectSoundTimer = 0;
    }
    
    //super deflect: cuts off at deflect blocks
    if guardCancel == 4
    {
        if hitDir == 1
            expandUp = (other.bbox_top - trueY);
        else    //i.e. if hitDir != 1
            expandDown = (trueY - other.bbox_bottom);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw me a column of storm
var doDis = (disperse != 0);

//debug: draw hitbox and y origin
/*
draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);
draw_line_color(x - 56, y, x + 56, y, c_red, c_red);
if doDis
{
    draw_line_color(x - 56, trueY + disperse, x + 56, trueY + disperse, c_teal, c_teal);
    draw_line_color(x - 56, trueY - disperse, x + 56, trueY - disperse, c_teal, c_teal);
}
*/

//draw funnel
var sh = sprite_get_height(sprite_index);
var p = ceil((bbox_top - trueY) / sh) * sh;    //top of funnel
var endcon = bbox_bottom - trueY; //bottom of funnel
var flicker = (p / sh) + animTimer;
for (p = p; p &lt;= endcon; p += sh;)
{   // + (sh / 2)
    
    //skip drawing if this part is being dispersed, or if flickering is on
    if (doDis &amp;&amp; abs(p) &lt; disperse) || (global.doFlashing &amp;&amp; flicker-- mod 2 != 0)
        continue;
    draw_sprite(sprite_index, image_index, 
        round(x + sin((animTimer + (p / 2)) / 6) * waveWidth), 
        round(trueY) + p);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
