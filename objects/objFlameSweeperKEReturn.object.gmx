<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFlameSweeperKELarge</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1 / 3;

contactDamage = 2;

penetrate = 0;
pierces = 2;
attackDelay = 8;


moveAngle = 0;
forwardMoveSpeed = 4;
lateralMoveSpeed = 0;

imageAngle = 0;
animTimer = 0;
turnAnim = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    //animate
    animTimer++;
    image_index = (imageAngle * 2) + ((animTimer / 10) mod 2);
    
    //accelerate forwards
    if forwardMoveSpeed &lt; 13
        forwardMoveSpeed = min(forwardMoveSpeed + 0.60, 13);
    //decelerate lateral movement
    if abs(lateralMoveSpeed) != 0
        lateralMoveSpeed = (abs(lateralMoveSpeed) - 0.02) 
            * (4 / 5) * sign(lateralMoveSpeed);
    
    //move
    if (canDamage)
    {
        xspeed = (cos(degtorad(moveAngle)) * forwardMoveSpeed)
            + ((cos(degtorad(moveAngle + 90)) * lateralMoveSpeed));
        yspeed = (-sin(degtorad(moveAngle)) * forwardMoveSpeed)
            + ((-sin(degtorad(moveAngle + 90)) * lateralMoveSpeed));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
