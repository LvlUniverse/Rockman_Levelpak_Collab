<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBlockTurret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canDamage = false; //this thing firs shots, but isn't really a shot itself

grav = 0.4; //heavy!

isSolid = true;
blockCollision = 1;

bulletLimitCost = 0;

// Object specific
extended = 0;
extendDir = -1;
shootTimer = 0;
isHeld = false;
haslanded = false;
mySolid = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy extra solid

if instance_exists(mySolid)    //destroy my solid if held, just in case...
    instance_destroy(mySolid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    //stop when it hits the ground
    if ground &amp;&amp; !haslanded &amp;&amp; !isHeld
    {
        haslanded = true;
        xspeed = 0;
        playSFX(sfxHeavyLand);
        screenShake(10, 0, 1);
    }
    if !ground
        hasLanded = false;
    
    //fire shots
    shootTimer = ++shootTimer mod 48;
    if (shootTimer &lt; 36) &amp;&amp; (shootTimer mod 6 == 0)
    {
        var s = instance_create(x + (18 * image_xscale), 
            y + ((7 + -extended) * image_yscale) + -(image_yscale == -1), 
            objBlockTurretShot);
        s.image_xscale = image_xscale;
        //s.depth = depth + 1;
    }
    
    //platform functions
    if !isHeld
    {
        //while stood on...
        with(objMegaman)
        {
            if (id == other.parent) &amp;&amp; !dead &amp;&amp; ground
                &amp;&amp; place_meeting(x, y + (sign(grav) * (other.extended + 1)), other)
            {
                //switches height when landed on, and can also be controlled manually
                var ydir = (global.keyUp[playerID] - global.keyDown[playerID]) * sign(other.image_yscale);
                if (ydir != 0 &amp;&amp; ydir != other.extendDir) || (ydir == 0 &amp;&amp; ycoll != 0)
                {
                    other.extendDir = -other.extendDir;
                    playSFX(sfxBladeManSeeSawCart1);
                }
                //turn to face the direction the player is facing
                if sign(other.image_xscale) != sign(image_xscale)
                {
                    with(other)
                    {
                        x = x + (16 * image_xscale);
                        image_xscale = abs(image_xscale) * sign(parent.image_xscale);
                        mySolid.image_xscale = image_xscale;
                        mySolid.x = x;
                    }
                }
            }
        }
        //change size accordingly, if there's room
        if (extendDir == 1 &amp;&amp; extended &lt; 16 
            &amp;&amp; !checkSolid(0, -extended * sign(image_yscale)))
            || (extendDir == -1 &amp;&amp; extended &gt; 0)
        {
            extended += extendDir * 2;
        }
        //control solid
        if !instance_exists(mySolid)
        {
            mySolid = instance_create(x, y, objSolidEntity);
            //mySolid.visible = true;
            mySolid.image_xscale = image_xscale;
            mySolid.image_yscale = image_yscale;
            mySolid.faction = faction;
            mySolid.fnsolid = fnsolid;
        }
        mySolid.xspeed = x - mySolid.x;
        mySolid.yspeed = (y - (extended * image_yscale)) - mySolid.y;
    }
    else if instance_exists(mySolid)    //destroy my solid if held, just in case...
        instance_destroy(mySolid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///While equipped...

var doShoot = (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
//if no block turret exists, make one when shoot is pressed
if !instance_exists(objBlockTurret) &amp;&amp; (global.ammo[playerID, global.weaponID[? objBlockTurret]] &gt;= 6)
{
    if doShoot
    {
        var i = fireWeapon(0.5, -25, objBlockTurret, 999, 6, 0, 0);
        if (instance_exists(i))
        {
            i.isHeld = true;
            instance_create(bboxGetXCenterObject(i), bboxGetYCenterObject(i), objExplosion);
            playSFX(sfxBallBounce);
        }
    }
}
else    //if block turret exists...
{
    //perform 'carrying' function if block is being carried
    var r = true;
    with(objBlockTurret)
    {
        if isHeld
        {
            r = false;
            //super arm code
            other.isShoot = 6;
            other.shootTimer = 0;
            blockCollision = false;
            grav = 0;
            despawnRange = -1;
            isSolid = false;
            with(other)
            {
                originToBBoxBottom = bbox_bottom - round(y);
                originToBBoxTop = round(y) - bbox_top;
                originToBBoxCenter = (bbox_left + bbox_right) / 2 - round(x);
                var superArmDesiredX = x - originToBBoxCenter;
                var superArmDesiredY = y - originToBBoxBottom - 6 - (isSlide * -4);
                if (image_yscale == -1)
                {
                    superArmDesiredY = y + originToBBoxTop + 6;
                }
            }
            //print(string(x - superArmDesiredX) + ", " + string(y - superArmDesiredY));
            x = superArmDesiredX;
            y = superArmDesiredY;
            xspeed = 0;
            yspeed = 0;
            image_xscale = other.image_xscale
            image_yscale = other.image_yscale;
            if(doShoot) //if it's held and you press fire, place it down
            {
                isHeld = false;
                other.isShoot = 2;
                other.shootTimer = 0;
                y += 16 * other.image_yscale;
                shiftObject(10 * other.image_xscale, 0, true);
                //xspeed = 1.5 * other.image_xscale;
                grav = 0.4 * other.image_yscale;
                despawnRange = 4;
                isSolid = true;
                blockCollision = true;
            }
        }
    }
    
    //fire buster shots elsewise
    if r &amp;&amp; doShoot
    {
        with (fireWeapon(16, 0, objNormalBusterShot, 3, 0, 1, 0))
            xspeed = image_xscale * 5; // zoom
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon setup
weaponSetup("BLOCK TURRET", 
    make_color_rgb(168, 0, 32), 
    make_color_rgb(248, 88, 152), 
    sprWeaponIconsBlockTurret, 6, 
        " You form and hold a rapid-firing turret in your hand, and can press FIRE again to place it on the floor.## Once placed, you can fire buster shots in addition to the turret's shots.## The turret can be stood on, and will adjust its height when landed on.",
        "1#5#1#6");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawn as a combo of several parts

//3-piece telescoping connector
if extended != 0
{
    var myExtend;
    var gravMod = (image_yscale == -1) * -2;
    for(var p = 1; p &lt;= 3; p++)
    {
        myExtend = (16 - extended) * ((4 - p) / 3);
        draw_sprite_part_ext(sprite_index, p, 0, 0, 16, 16 - myExtend, floor(x + 0.5), 
            ceil(y + 0.5 + gravMod + ((-4 + myExtend) * image_yscale)), 
            image_xscale, image_yscale, c_white, 1);
    }
}

//base
draw_sprite_ext(sprite_index, 0, floor(x + 0.5), 
    floor(y + 0.5 + -(extended * image_yscale)), 
    image_xscale, image_yscale, 0, c_white, 1);
//gun
draw_sprite_ext(sprite_index, 4, floor(x + 0.5), floor(y + 0.5), 
    image_xscale, image_yscale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
