<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDescriptionMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = false;

if (!instance_number(object_index) &gt; 1)
{
    instance_destroy();
    visible = false;
    exit;
}

phase = 0;
link = 0;

option = 0;

animTimer = 0;
quickScrollTimer = 25;

//arrays that get filled in by mapInfoFetch
cpNames = undefined;
warpPointXs = undefined;
warpPointYs = undefined;
warpPointRoom = undefined;
thumbImg = undefined;

mapInfoFetch();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if no pause menu is open, leave and spit error
if (!instance_exists(link))
{
    printErr("Description menu exists, but not pause menu!")
    instance_destroy();
    exit;
}

animTimer++;

switch (phase)  //copied from pause menu
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
            phase++;
        break;
    
    // Doing menu selections
    case 2:
        //exit menu with many buttons
        if global.keyJumpPressed[0] || global.keyShootPressed[0] || global.keyPausePressed[0] || global.keySlidePressed[0]
        {
            phase++;
            playSFX(sfxElementGrab);
            break;
        }
        
        var xDir = (global.keyRight[0] - global.keyLeft[0]);
        //scrolling and quickscrolling
        var doScroll = false;
        if (xDir != 0)
        {
            if (quickScrollTimer == 0) || (quickScrollTimer == 25)
            {
                doScroll = true;
                if (quickScrollTimer == 0)
                    quickScrollTimer = 8;
            }
            quickScrollTimer--;
        }
        else
            quickScrollTimer = 25;
        
        //what to do when scrolling
        if (doScroll)
        {
            //scroll until a non-hidden weapon is encountered (locked weps are fine)
            var ifi = true;
            while (ifi || global.weaponLocked[global.weaponHotbar[option]] == 2)
            {
                ifi = false;
                option += xDir;
                //wrapping
                if option &lt; 0
                    option += 12;
                if (option &gt; 11)
                    option -= 12;
            }
            
            playSFX(sfxWeaponSwitch);
                
            //moving around in here moves around in pause menu, too!
            link.option = option + 10;
            //handle weapon colors
            with(link)
            {
                global.weapon[playerID] = global.weaponHotbar[other.option];
                with(objMegaman)
                    playerPalette();
            }
        }
        break;
    
    // Fading out
    case 3:
        global.nextRoom = -1;
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            visible = 0;
            phase++;
        }
        break;
    
    // Fading back in to pause menu
    case 4:
        if objGlobalControl.fadeAlpha == 0
        {
            global.frozen = true;
            instance_destroy();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

// center display on non-standard resolutions
drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
drawYPosition = view_yview[0] + view_hview[0] / 2 - 112;

// draw menu bg
draw_sprite(sprite_index, 0, drawXPosition, drawYPosition);

draw_set_halign(fa_left);
draw_set_valign(fa_top);

//draw_text(x, y, string(option))//debug: draw option

var drawTitle = "error";
var drawDesc = "nothing";
var drawStats = "-#-#-#-";

//get weapon info from global weapon list
var wep = global.weapon[0];
drawTitle = global.weaponName[wep];
drawDesc = global.weaponDescription[wep, 0];
drawStats = global.weaponDescription[wep, 1];

//draw weapon icon
draw_sprite_ext(global.weaponIcon[wep], 0, x + 24, y + 8, 1, 1, 0, make_color_rgb(255, 228, 164), 1);
draw_sprite_ext(global.weaponIcon[wep], 1, x + 24, y + 8, 1, 1, 0, global.primaryCol[0], 1);
draw_sprite_ext(global.weaponIcon[wep], 2, x + 24, y + 8, 1, 1, 0, global.secondaryCol[0], 1);
draw_sprite_ext(global.weaponIcon[wep], 3, x + 24, y + 8, 1, 1, 0, c_white, 1);
//todo: add quick scroll, maybe add support for descriptions longer than one screen

draw_text(x + 48, y + 12, drawTitle);
draw_text(x + 32, y + 40, drawDesc);
draw_text(x + 32, y + 184, "DAMAGE#SPEED#SHOT LIMIT#COST");
draw_set_halign(fa_right);
draw_text(x + 216, y + 184, drawStats);
draw_set_halign(fa_left);

//arrows
draw_sprite_ext(sprArrow, 0, x + 27 - ceil((animTimer mod 29 + 1) / 10), y + 105, 1, 1, 0, c_white, 1);
draw_sprite_ext(sprArrow, 0, x + 229 + ceil((animTimer mod 29 + 1) / 10), y + 105, 1, 1, 180, c_white, 1);

// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_sprite_ext(sprDot, 0, view_xview[0] + 16, view_yview[0], view_wview[0] - 32, view_hview[0], 0,
        make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue),
        global.coloredTextOverlaysOpacity / 255);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
