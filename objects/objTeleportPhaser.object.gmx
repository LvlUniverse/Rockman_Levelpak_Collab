<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMegamanTeleport</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>mskMegaman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

penetrate = 3;
pierces = 2;

contactDamage = 1;
attackDelay = 4;

grav = 0;
xspeed = 0;
yspeed = 0;

blockCollision = 1;
bulletLimitCost = 1;

despawnRange = -1;

//variables
xs = 0;
ys = -4;

timer = 30;

img = 0; // teleportImg

phaserLock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///release lock pools
event_inherited();

if (instance_exists(parent))
{
    with(parent)
    {
        lockPoolRelease(other.phaserLock);
        hitTimer = 0;
        iFrames = 30;
        canMinJump = false;
        yspeed = other.ys * sign(image_yscale);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// check for parent
if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}
else
{
    image_yscale = parent.image_yscale * 1.2;
    
    x = parent.x; // stay attached to MM
    y = parent.y;
}

if (!global.frozen)
{
    
    if (timer mod 4 == 0){
        if (img &lt; 2){
            img++;
        }
    }
    
    with (parent) // Mega Man anim + movement forcing
    {
        if (!other.phaserLock)
        {
            other.phaserLock = lockPoolLock(
                localPlayerLock[PL_LOCK_MOVE],
                localPlayerLock[PL_LOCK_SHOOT],
                localPlayerLock[PL_LOCK_CHARGE],
                localPlayerLock[PL_LOCK_SLIDE],
                localPlayerLock[PL_LOCK_TURN],
                localPlayerLock[PL_LOCK_JUMP],
                localPlayerLock[PL_LOCK_CLIMB],
                localPlayerLock[PL_LOCK_GRAVITY]);
            xspeed = 0;
            yspeed = 0;
        }
        else{
            if (other.img &gt; 1) yspeed = other.ys * other.image_yscale; // movement force
            iFrames = -1;
            spriteX = 12 - other.img;
            spriteY = 8;
        }
    }
    if (isLocked(global.playerLock[PL_LOCK_MOVE]) &amp;&amp;
    isLocked(global.playerLock[PL_LOCK_TURN]))
    {
        timer = 0;
    }
    
    
    // Destroy timer
    timer -= 1;
    if (timer &lt;= 0)
    {
        xspeed = 0;
        instance_destroy();
    }
}
else if (global.switchingSections)
{
    with (parent)
    {
        playerHandleSprites("Teleport");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///while equipped...
var chargeTime = 40; // Set charge time for this weapon
var initChargeTime = 20;

// Shooting buster shots if not charged.
if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; !instance_exists(objTeleportPhaser))
{
    i = fireWeapon(16, 0, objNormalBusterShot, 3, 0, 1, 0);
    if (i)
    {
        i.xspeed = image_xscale * 5; // zoom
    }
}

//////////////
// Charging //
//////////////

if (global.ammo[playerID, global.weapon[playerID]] &gt; 0)
{
    if ((global.keyShoot[playerID] || (isSlide &amp;&amp; chargeTimer &gt; 0))
        &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE))
    {
        if (!isShoot)
        {
            isCharge = true;
            if (!isSlide)
            {
                initChargeTimer += 1;
            }
            if (initChargeTimer &gt;= initChargeTime)
            {
                chargeTimer += 1;
                if (chargeTimer == 1)
                {
                    playSFX(sfxCharging);
                }
                if (chargeTimer &lt; chargeTime)
                {
                    var chargeTimeDiv, chargeCol;
                    chargeTimeDiv = round(chargeTime / 3);
                    if (chargeTimer &lt; chargeTimeDiv)
                    {
                        chargeCol = global.nesPalette[22]; // green
                    }
                    else if (chargeTimer &lt; chargeTimeDiv * 2)
                    {
                        chargeCol = global.nesPalette[35]; // yellow
                    }
                    else
                    {
                        chargeCol = global.nesPalette[40]; // white
                    }
                    if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                    {
                        global.outlineCol[playerID] = chargeCol;
                    }
                    else
                    {
                        global.outlineCol[playerID] = c_black;
                    }
                }
                else
                {
                    if (chargeTimer == chargeTime)
                    {
                        audio_stop_sound(sfxCharging);
                        playSFX(sfxCharged);
                    }
                    switch (floor(chargeTimer / 3 mod 3))
                    {
                        case 0: // Light blue helmet, black shirt, blue outline 
                                    global.primaryCol[playerID] = rockSecondaryCol;
                                    global.secondaryCol[playerID] = c_black;
                                    global.outlineCol[playerID] = rockPrimaryCol;
                                    break;
                                case 1: // Black helmet, blue shirt, light blue outline 
                                    global.primaryCol[playerID] = c_black;
                                    global.secondaryCol[playerID] = rockPrimaryCol;
                                    global.outlineCol[playerID] = rockSecondaryCol;
                                    break;
                                case 2: // Blue helmet, light blue shirt, blue outline 
                                    global.primaryCol[playerID] = rockPrimaryCol;
                                    global.secondaryCol[playerID] = rockSecondaryCol;
                                    global.outlineCol[playerID] = c_black;
                                    break;
                    }
                }
            }
        }
    }
    else // Release the charge shot
    {
        if (chargeTimer != 0 &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; !isHit)
        {
            // Climbing constantly flips your xscale, so here just rely on a seperate variable set w/ direction keys and stuff in playerStep
            if (climbing)
            {
                image_xscale = climbShootXscale;
            }
            
            /////////////////////
            // ACTUAL SHOOTING //
            /////////////////////
            
            // full charge
            if (chargeTimer &gt;= chargeTime)
            {
                a = fireWeapon(0, 0, objTeleportPhaser, 1, 3, 0, 0);
                if (a){
                    if (global.teleportSound)
                        playSFX(sfxTeleportOutClassic);
                    else
                        playSFX(sfxTeleportOut);
                    a.image_yscale = image_yscale;
                }
            }
            
            // reset all charging stuff
            chargeTimer = 0;
            initChargeTimer = 0;
            audio_stop_sound(sfxCharged);
            audio_stop_sound(sfxCharging);
            playerPalette(); // Reset the colors
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon setup
weaponSetup("TELEPORT PHASER", -1, -1, sprWeaponIconsTeleportPhaser, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///no deflecting.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
