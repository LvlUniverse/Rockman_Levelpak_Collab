<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNekoClaw</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;
despawnRange = -1;

contactDamage = 1;
attackDelay = 4;    //automatically hits for its full attack delay when held!

penetrate = 3;
pierces = 2;    //needs to survive every time it hits an enemy, even if it can't do damage afterwards


//object-specific
moveAngle = 0;
dist = 8;
hitFreeze = undefined;

xoff = 0;
yoff = 0;
itemXOff = 0;
itemYOff = 0;
turnLock = undefined;

heldItem = noone;
grappled = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear locks when destroyed
lockPoolRelease(turnLock);

if instance_exists(parent) &amp;&amp; parent.shootStandStillLock != 0 &amp;&amp; !global.keyShoot[playerID]
    parent.shootStandStillLock = lockPoolRelease(parent.shootStandStillLock);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

visible = true;

if (!global.frozen)
{
    //die if parent is gone
    if !instance_exists(parent)
    {
        instance_destroy();
        exit;
    }
    
    //if grappled, but grapple point is gone somehow, die
    if grappled != noone &amp;&amp; (grappled.dead || !instance_exists(grappled))
    {
        instance_destroy();
        exit;
    }
    
    //force player into shooting pose
    parent.shootTimer = 14;
    //lock player's movement if they land, to keep them from using the walking aiming sprites
    with(parent)
    {
        if ground &amp;&amp; shootStandStillLock == 0
        {
            xspeed = 0;
            shootStandStillLock = lockPoolLock(localPlayerLock[PL_LOCK_MOVE]);
        }
    }
    
    //movement while not grappled
    if grappled == noone
    {
        if hitFreeze == undefined
        {   //extend
            dist += 8;
            if dist &gt; 56    //return with no hitfreeze when it extends too far
                hitFreeze = 0;
        }
        else if hitFreeze-- &lt;= 0
        {   //retract
            dist -= 8;
            //delete when fully returned
            if dist &lt; 0
            {
                parent.shootTimer = 15;
                if instance_exists(heldItem)    //drop off held item
                {
                    heldItem.x = parent.x + (heldItem.x - spriteGetXCenterObject(heldItem));
                    heldItem.y = parent.y + (heldItem.y - spriteGetYCenterObject(heldItem));
                }
                instance_destroy();
                exit;
            }
        }
        
        //moves with player using an angle and a distance, instead of moving via xspeed and yspeed
        event_user(0);
        x = parent.x + (xoff * parent.image_xscale) + (cos(degtorad(moveAngle)) * dist);
        y = parent.y + (yoff * parent.image_yscale) + (-sin(degtorad(moveAngle)) * dist);
        
        //if not already grabbing something...
        if (heldItem == noone)
        {
            //look for poles to grab
            if (canDamage)
            {
                var p = instance_nearest(x, y, objThunderClawPole)
                if p != noone &amp;&amp; place_meeting(x, y, p)
                {
                    grappled = p;
                    playSFX(sfx4MIWireAdaptorLatch);
                    hitFreeze = 0;
                    canDamage = false;
                    image_index = (image_index mod 4) + 4;
                    exit;   //if a pole was grabbed, don't check for items
                }
            }
            //look for items to grab
            with(prtPickup)
            {
                if grabable &amp;&amp; instance_place(x, y, other)
                {
                    grav = 0;
                    blockCollision = false;
                    other.heldItem = self;
                    other.image_index = (other.image_index mod 4) + 4;
                    break;
                }
            }
        }
        else    //i.e. if heldItem != noone
        {
            if instance_exists(heldItem)
            {
                //keep item positioned within claw
                heldItem.x = x + itemXOff + (heldItem.x - spriteGetXCenterObject(heldItem));
                heldItem.y = y + itemYOff + (heldItem.y - spriteGetYCenterObject(heldItem));
            }
            else    //if held item vanishes unexpectedly, de-hold it
            {
                heldItem = noone;
                image_index = image_index mod 4;
            }
        }
    }
    else    //i.e. if grappled != noone
    {
        //stays on grapple pole
        x = grappled.x + 8 + -(itemXOff / 2);
        y = grappled.y + 8 + -(itemYOff / 2);
        
        if dist &lt;= 0
        {   //when returned, stay in place until player lets go of fire
            dist = 0;
            if !global.keyShoot[playerID]
            {
                parent.shootTimer = 15;
                parent.yspeed = 0;
                instance_destroy();
                exit;
            }
        }
        else    //if not returned, retract
            dist -= 8;
        
        //move the player, instead of moving with player
        event_user(0);
        var ppx = (xoff * parent.image_xscale) + (cos(degtorad(moveAngle)) * dist);
        var ppy = (yoff * parent.image_yscale) + (-sin(degtorad(moveAngle)) * dist);
        with(parent)
            shiftObject((other.x - ppx) - x, (other.y - ppy) - y, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///when equipped...
//fire while button is held
if (global.keyShoot[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    i = fireWeapon(16, 0, objNekoClaw, 1, 0.5, 1, 1);
    if (instance_exists(i))
    {
        //sound
        playSFX(sfxStegorusMissile);
        
        //lock the player's ability to turn around
        i.turnLock = lockPoolLock(localPlayerLock[PL_LOCK_TURN],
            localPlayerLock[PL_LOCK_SLIDE]);
        
        //get an angle depending on the player's inputs
        if (xDir != 0)
        {
            i.moveAngle = -90 * xDir;
            i.image_xscale = xDir;
        }
        else
            i.moveAngle = 90 * sign(-image_xscale) //default to straight forward
        if (yDir != 0)
        {
            if (xDir != 0) || (yDir == image_yscale)    //if aimed straight down, go diagonal instead
                i.moveAngle += 45 * sign(i.moveAngle) * yDir;
            else
                i.moveAngle = 90 * (yDir + 1);
        }
            
        //change firing frame based on the direction aimed
        var s = sign(i.moveAngle)
        s = s + (s == 0);   //why the FUCK does sign return 0 if you input 0. it makes things like this a huge pain
        if image_yscale &lt; 0
            i.moveAngle = 180 - abs(i.moveAngle);
        switch(abs(i.moveAngle))
        {
            case 0: //up
                i.image_index = 0;
                i.itemYOff = -10;
                isShoot = 3;
                break;
            case 45:    //up-side
                i.image_index = 1;
                i.itemXOff = 7;
                i.itemYOff = -6;
                isShoot = 4;
                break;
            case 90:    //side
                i.image_index = 2;
                i.itemXOff = 10;
                isShoot = 1;
                break;
            case 135:   //down-side
                i.image_index = 3;
                i.itemXOff = 7;
                i.itemYOff = 6;
                isShoot = 5;
                break;
            case 180:   //down: this should never happen
                printErr("neko claw shouldn't be firable straight down!")
                break;
        }
        if image_yscale &lt; 0
            i.moveAngle = (180 - abs(i.moveAngle)) * s;
        
        i.moveAngle = i.moveAngle + 90
        i.itemXOff *= i.image_xscale;
        i.itemYOff *= i.image_yscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon setup
weaponSetup("NEKO CLAW", 
    make_color_rgb(228, 92, 16), 
    c_white, 
    sprWeaponIconsNekoClaw, 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return when it hits an enemy
hitFreeze = attackDelay - 2;
canDamage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return when deflected
playSFX(sfxReflect);
event_user(8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///big table of offsets for mega's many animation frames

switch parent.spriteY
{
    case 1: //forwards
        if (parent.climbing)
        {   //climbing
            xoff = 10;
            yoff = 2;
        }
        else if (!parent.ground)
        {   //jumping
            xoff = 11;
            yoff = -1;
        }
        else
        {
            /*
            if (parent.stepTimer &gt;= parent.stepFrames)
            {   //walking
                xoff = 13;
                yoff = 4;
            }
            */
            //standng
            xoff = 15;
            yoff = 4;
        }
        break;
    
    
    
    case 3: //up
        if (parent.climbing)
        {   //climbing
            xoff = 5;
            yoff = -7;
        }
        else if (!parent.ground)
        {   //jumping
            xoff = 6;
            yoff = -9;
        }
        else
        {
            /*
            if (parent.stepTimer &gt;= parent.stepFrames)
            {   //walking
                xoff = 10;
                yoff = -5;
            }
            */
            //standng
            xoff = 5;
            yoff = -5;
        }
        break;
    
    
    
    case 4: //upright
        if (parent.climbing)
        {   //climbing
            xoff = 9;
            yoff = -2;
        }
        else if (!parent.ground)
        {   //jumping
            xoff = 10;
            yoff = -4;
        }
        else
        {
            /*
            if (parent.stepTimer &gt;= parent.stepFrames)
            {   //walking
                xoff = 12;
                yoff = -1;
            }
            */
            //standng
            xoff = 14;
            yoff = -1;
        }
        break;
    
    
    
    case 5: //downright
        if (parent.climbing)
        {   //climbing
            xoff = 9;
            yoff = 7;
        }
        else if (!parent.ground)
        {   //jumping
            xoff = 11;
            yoff = 4;
        }
        else
        {
            /*
            if (parent.stepTimer &gt;= parent.stepFrames)
            {   //walking
                xoff = 9;
                yoff = 10;
            }
            else
            */
            //standng
            xoff = 13;
            yoff = 8;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw a chain connecting claw to megaman
if instance_exists(parent)
{
    var tx = parent.x + (xoff * parent.image_xscale);
    var ty = parent.y + (yoff * parent.image_yscale);
    
    //five links total: but two of the links are the buster and the claw itself
    for (var i = 1 / 5; i &lt; 1; i += 1 / 5;)
        draw_sprite(sprNekoClawChain, (i + 1) % 2, 
            x - ((x - tx) * i), 
            y - ((y - ty) * i));
}

event_inherited();  //draw itself, too
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
