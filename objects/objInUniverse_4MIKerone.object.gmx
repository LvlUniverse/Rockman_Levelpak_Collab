<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprInUniverse_4MIKerone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//a simple frog-like robot that hops in megaman's direction

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;
//reduced gravity
grav = 0.18

category = "nature, grounded";

facePlayerOnSpawn = true;

// Enemy specific code
contactStart = contactDamage;
jumpTimer = 15;
init = false;
despawnRangeStart = 4;  //change this instead of the default despawnRange variable. used to allow it to not despawn off te top of the screen

//@cc the force with which the enemy jumps off the ground
jumpHeight = 5.5;

//@cc how many frames the enemy stays grounded between hops
jumpDelay = 120;

//@cc how fast the enemy moves laterally. the enemy only moves while hopping in the air
moveSpeed = 1;

//@cc if this is set to false, the enemy will not turn to face megaman. it will still turn around at walls.
autoOrient = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//don't despawn off the top of the screen
if (bbox_bottom + yspeed &lt; view_yview) || (bbox_bottom &lt; view_yview)
    &amp;&amp; !((bbox_right + despawnRange &lt; view_xview[0]) 
        || (bbox_left - despawnRange &gt; view_xview[0] + view_wview[0]))
    despawnRange = -1;
else
    despawnRange = despawnRangeStart;

event_inherited();

if (entityCanStep())
{
    //image_index 0 is readying to hop, if on ground
    if (image_index &lt; 2)
    {
        xspeed = 0;
        
        //only works towards a hop if it's landed on something
        if (ground)
            jumpTimer += 1;
        else
            jumpTimer = 0;
        
        //turn to face the player shortly before hopping
        if (jumpTimer == jumpDelay - 15) &amp;&amp; (autoOrient == true)
            calibrateDirection();
            
        //reels back a bit just after landing and just before jumping
        if (jumpTimer &gt; 3 &amp;&amp; jumpTimer &lt; 12 &amp;&amp; init)
            || (jumpTimer &gt; jumpDelay - 12 &amp;&amp; jumpTimer &lt; jumpDelay - 3)
            image_index = 1;
        else 
            image_index = 0;
        
        //the hop
        if (jumpTimer &gt;= jumpDelay)
        {
            jumpTimer = 0;
            image_index = 2;
            yspeed = -jumpHeight;
            init = true;
        }
    }
    //image_index 2 is hopping
    else
    {
        //move laterally
        xspeed = image_xscale * moveSpeed;
        
        //turn around if it hits a wall
        if(xcoll != 0)
            image_xscale = -image_xscale;
        
        //return to initial state when it lands
        if (ground)
            image_index = 0;
    }
    
    //note that, unlike the mechakkero from mm3,
    //this sprite can be in a non-hopping state and be airborne at the same time
}
else if (dead)
{
    jumpTimer = 0;
    image_index = 0;
    init = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
