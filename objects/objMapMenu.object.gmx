<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMapMenuThumbFrame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(object_index) &gt; 1) || !instance_exists(objPauseMenu)
{
    instance_destroy();
    exit;
}

link = noone;

phase = 0;

option = 1;
quickScrollTimer = 25;

scrollOff = 80;

/*
stuff filled in by mapInfoFetch:
mapName
thumbImg
cpNames(array)
warpPointXs(array)
warpPointYs(array)
warpPointRoom(array)
*/

mapName = "error";
mapInfoFetch();

cpTotal = array_length_1d(cpNames) - 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior

switch (phase)
{
    case 0: //pan in
        visible = true;
        //(224 / 256) * 12 = 10.5; 
        //same frame data as horizontal transition at 12 pixels per frame
        link.scrollY -= 10.5;
        if link.scrollY &lt;= -224
        {
            link.scrollY = -224;
            phase = 2;
        }
        break;
    
    case 1: //pan out
        global.nextRoom = 0;
        link.scrollY += 10.5;
        if link.scrollY &gt;= 0
        {
            link.scrollY = 0;
            instance_destroy();
            exit;
        }
        break;
}       //phase 2 for the real menu: done elsewhere
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu movement &amp; cancelling

// exit with b or up
if phase == 2 &amp;&amp; (global.keyShootPressed[0] || global.keyUpPressed[0])
{
    selected = true;
    if link == noone
        phase++;
    else
        phase = 1;
    playSFX(sfxSkullAmulet);
    exit;
}

//left and right controlling 
dir = (global.keyRightPressed[0] || (global.keyRight[0] &amp;&amp; quickScrollTimer &lt;= 0)) - (global.keyLeftPressed[0] || (global.keyLeft[0] &amp;&amp; quickScrollTimer &lt;= 0))
    + ((global.keyWeaponSwitchRightPressed[0] - global.keyWeaponSwitchLeftPressed[0]) * 4);
if (dir != 0)
{
    var lo = option;
    option += dir;
    option = clamp(option, 0, cpTotal);
    if lo != option //if option actually changed
        playSFX(sfxWeaponSwitch);
    else
        quickScrollTimer = 25;
}
//quick scroll timer handling
if (global.keyLeft[0] ^^ global.keyRight[0])
{
    if (quickScrollTimer-- &lt;= 0)
        quickScrollTimer = 9;
}
else
    quickScrollTimer = 25;

scrollOff += ((option * 80) - scrollOff) / 8;   //smooth scrolling
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///selecting an option

if (global.keyJumpPressed[0] || global.keyPausePressed[0])
{
    playSFX(sfxMenuSelect);
    phase = 3; //lock controls
    
    if option == 0  //option 0 is always "exit"
        returnFromLevel();
    else
    {   //elsewise, jump to place
        global.nextRoom = warpPointRoom[option];
        global.hasTeleported = true;
        global.teleportX = warpPointXs[option];
        global.teleportY = warpPointYs[option];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(link)
{
    drawXPosition = link.x;
    drawYPosition = link.y + 224;
}
else
{   //center display on non-standard resolutions
    drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
    drawYPosition = view_yview[0] + view_hview[0] / 2 - 112;
}
var cntr = view_wview / 2;

//text alignment
draw_set_halign(fa_center);
draw_set_valign(fa_top);

//black backers for cp name &amp; thumbnail
draw_set_color(c_black);
draw_rectangle(drawXPosition - 20, drawYPosition + 65, 
    drawXPosition + view_wview + 20, drawYPosition + 149, false);
draw_rectangle(drawXPosition - 20, drawYPosition + 178, 
    drawXPosition + view_wview + 20, drawYPosition + 189, false);
draw_set_color(c_white);

//header
var hw = string_length(mapName);
var hx = (cntr - (hw * 4)) - 4;
for (var h = 0; h &lt;= hw; h++)
    draw_sprite(sprMapMenuHeader, (h &gt; 0) + (h &gt;= hw), 
        drawXPosition + hx + (h * 8), drawYPosition + 32);

draw_text(drawXPosition + cntr, drawYPosition + 32 + 4, mapName);

//position lamps
var loff = (cpTotal + 1) * -3.5;
var dx;
for(var l = 0; l &lt;= cpTotal; l++)
{
    dx = drawXPosition + cntr + loff + (l * 7);
    draw_sprite(sprMapLamps, 2 + (l &gt; 0) + (l &gt;= cpTotal), dx, drawYPosition + 70);
    draw_sprite(sprMapLamps, option == l, dx, drawYPosition + 70);
}

//thumbnails &amp; bookends
var xOff = cntr - scrollOff;

draw_sprite(sprMapMenuCaps, 0, drawXPosition + xOff + -56 + -40 + -8, drawYPosition + 112);

for (i = 0; i &lt;= cpTotal; i++)
{
    draw_sprite(sprMapMenuThumbFrame, option == i, drawXPosition + xOff, drawYPosition + 112);
    if i == 0
        draw_sprite(sprMapThumbBack, option == i, drawXPosition + xOff + -24, drawYPosition + 112 + -24);
    else
        draw_sprite(thumbImg, (option == i) + (i * 2) + -2, drawXPosition + xOff + -24, drawYPosition + 112 + -24);
    xOff += 80;
}

draw_sprite(sprMapMenuCaps, 1, drawXPosition + xOff + -40 + 8, drawYPosition + 112);

//cp name
draw_text(drawXPosition + (view_wview / 2), drawYPosition + 180, cpNames[option]);

// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    var headw = string_length(mapName) * 4; //8 / 2
    draw_rectangle(drawXPosition + (view_wview / 2) - headw, drawYPosition + 32, 
        drawXPosition + (view_wview / 2) + headw, drawYPosition + 48, false);
    draw_rectangle(drawXPosition - 20, drawYPosition + 179, 
        drawXPosition + view_wview + 20, drawYPosition + 188, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
