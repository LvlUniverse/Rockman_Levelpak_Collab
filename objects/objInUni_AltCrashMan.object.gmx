<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprInUni_AltCrashMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// infiniteCrashBombs = true; -
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprInUni_AltCrashIntro;
poseImgSpeed = 4 / 60;
contactDamage = 6;
ground = false;
attackTimer = -1;

//build my own animation system from scratch cause i hate the one he came with
animTimer = 0;
animID = 0;
//animID corresponds to an index in the arrays below
//animations: walk, jump, throw bomber, dashblink, dash, spinstomp, spinstomp landing
animSpeed =  makeArray(8 , 99, 8 , 4 , 99, 99, 99); //how many frames each image of an animation lasts for
animStart =  makeArray(1 , 5 , 6 , 8 , 9 , 10, 11); //what image to start the animation on
animFrames = makeArray(4 , 1 , 2 , 2 , 1 , 1 , 1 ); //number of frames the animation has
animLoop =   makeArray(1 , 0 , 0 , 1 , 0 , 0 , 0 ); //whether or not the animation repeats from its beginning when it ends

attackTimerMax = 145;
phase = 0;
jumpY = -6.5;
walkX = 1.3;
delay = 0;
hasFired = false;
attackCount = 0;
shotBuffer = 0;
persistentVariable = -1;

stopOnFlash = false;

// Health Bar
healthBarPrimaryColor[1] = 24;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_2.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 2);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 6);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 2);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 0);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 0);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSlashClaw, 4);
enemyDamageValue(objSakugarne, 3);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 0);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 4);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 1);
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 4);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 4);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 0);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 0);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBrickWeapon, 0);
enemyDamageValue(objIceSlasher, 0);

enemyDamageValue(objTinTrooper, 6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (isFight == true)
    {
        sprite_index = sprInUni_AltCrashMan;
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        if (attackTimer != -1)
            attackTimer += 1;
        if (delay &gt; 0)
            delay -= 1;
        
        //check if the player fires, remember it for a few frames
        shotBuffer--;
        if (instance_exists(target) &amp;&amp; target.object_index == objMegaman 
            &amp;&amp; global.keyShootPressed[target.playerID])
            shotBuffer = 4;
        
        switch (phase)
        {
            case 0: // walk
                //turn around at walls
                xSpeedTurnaround();
                if (checkSolid(28 * sign(xspeed), 0) &amp;&amp; !checkSolid(-28 * sign(xspeed), 0))
                    image_xscale *= -1;
                
                //move
                xspeed = walkX * image_xscale;
                
                // if the shoot button is pressed, or crash man reaches a certain timer, he strikes
                if (shotBuffer &gt; 0 || (attackTimer &gt;= attackTimerMax))
                {
                    //pick an attack to do
                    if (attackCount++ &gt;= 1 + (healthpoints &gt; 10))
                    {
                        if persistentVariable = -1 || irandom(1) == 1
                            phase = choose(3, 5);
                        else
                            phase = persistentVariable;
                        attackCount = 0;   
                        persistentVariable = -1;
                    }
                    else
                        phase = 1;
                    //phase change setup
                    attackTimer = 0;
                    animID = 1;
                    animTimer = 0;
                    //slowly get more aggressive
                    attackTimerMax -= 2;
                }
                break;
            
            
            
            case 1: // normal crash man attack
                //face target
                if (delay == 0)
                    calibrateDirection();
            
                //jump slightly past target on first frame
                if attackTimer == 1
                {
                    delay = 4;
                    yspeed = jumpY;
                    if instance_exists(target)
                        xspeed = (min((abs(target.x - x) / 32), 6) 
                            + irandom_range(0, 2) 
                            ) * image_xscale / 2;
                    else    //if no target, use a fixed speed instead
                        xspeed = 1.5 * image_xscale;
                }
                
                //switch from jump anim to attack anim when we start falling
                if (animID == 1 &amp;&amp; yspeed &gt;= 0)
                {
                    animID = 2;
                    animTimer = 0;
                }
                
                //attack when appropriate frame of attack anim arrives
                if (image_index == 7 &amp;&amp; hasFired == false)
                {
                    cB = instance_create(x + (6 * image_xscale), y + 9,
                        objInUni_CrashBomber);
                    cB.image_xscale = image_xscale;
                    with(cB)
                    {
                        //aim at target
                        image_xscale = other.image_xscale;
                        if (instance_exists(target))
                        {
                            var angle;
                            angle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                                spriteGetXCenterObject(target),
                                spriteGetYCenterObject(target));
                            
                            xspeed = cos(degtorad(angle)) * 6;
                            yspeed = -sin(degtorad(angle)) * 6;
                            
                            if yspeed &lt; 0
                                image_yscale = -1;
                        }
                        else
                        {
                            //if no target, fire at 45 degrees downwards
                            xspeed = cos(pi * 2 / 8) * image_xscale * 6;
                            yspeed = sin(pi * 2 / 8) * 6;
                        }
                    }
                    hasFired = true;
                }
                
                //return to start when we land
                if (ground == true &amp;&amp; animID == 2)
                {
                    phase = 0;
                    animID = 0;
                    animTimer = 0;
                    attackTimer = 0;
                    hasFired = false;
                    delay = 0;
                }
                break;
            
            
                
                
            /*
            this wasn't really much fun, so it got cut
            
            case 2: // rapid attack
                //face target
                if (delay == 0)
                    calibrateDirection();
            
                //jump to wall opposite target
                if attackTimer == 1
                {
                    delay = 4;
                    yspeed = jumpY - 0.5;
                    if instance_exists(target)
                        var d = sign(target.x - x);
                    else    //if no target, jump to nearest wall instead
                        var d = sign((view_xview + (view_wview / 2)) - x);
                    
                    if d == 1
                        xspeed = xSpeedAim(x, y, view_xview + 24, y) * 2;
                    else
                        xspeed = xSpeedAim(x, y, view_xview + view_wview + -24, y) * 2;
                }
                
                //start attack anim under multiple conditions
                if (animID == 1 &amp;&amp; yspeed &gt;= 0) //begin falling
                    || (delay = 0 &amp;&amp; persistentVariable &lt; 2 &amp;&amp; hasFired) //repeat attacks
                {
                    xspeed = 0;
                    animID = 2;
                    animTimer = 0;
                    hasFired = false;
                }
                
                //attack when appropriate frame of attack anim arrives
                if (image_index == 8 &amp;&amp; !hasFired)
                {
                    cB = instance_create(x + (6 * image_xscale), y + 9,
                        objInUni_CrashBomber);
                    cB.image_xscale = image_xscale;
                    cB.contactDamage = 0;
                    with(cB)
                    {
                        //aim at target
                        image_xscale = other.image_xscale;
                        if (instance_exists(target))
                        {
                            var angle;
                            angle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                                spriteGetXCenterObject(target),
                                spriteGetYCenterObject(target));
                            
                            xspeed = cos(degtorad(angle)) * 6;
                            yspeed = -sin(degtorad(angle)) * 6;
                            
                            if yspeed &lt; 0
                                image_yscale = -1;
                        }
                        else
                        {
                            //if no target, fire at 45 degrees downwards
                            xspeed = cos(pi * 2 / 8) * image_xscale * 6;
                            yspeed = sin(pi * 2 / 8) * 6;
                        }
                    }
                    hasFired = true;
                    persistentVariable++;
                    yspeed = -1;
                    delay = 14;
                }
                
                //return to start when we land
                if (ground == true &amp;&amp; animID == 2)
                {
                    phase = 0;
                    animID = 0;
                    animTimer = 0;
                    attackTimer = 0;
                    hasFired = false;
                    delay = 0;
                }
                break;
            */
                
                
            
            
            case 3: // grounded dash
                //face target
                if (delay == 0)
                {
                    if (animID != 3)
                        calibrateDirection();
                    //when dash is readied, face direction target is from landing location
                    else if (instance_exists(target) &amp;&amp; target.x - persistentVariable != 0)
                        image_xscale = sign(target.x - persistentVariable);
                }
            
                //jump to target on first frame, keeping track of where we jumped to
                if (attackTimer == 1)
                {
                    delay = 4;
                    yspeed = jumpY;
                    if instance_exists(target)
                    {
                        persistentVariable = target.x + irandom_range (-24, 24)
                        xspeed = xSpeedAim(x, y, persistentVariable, y, yspeed, grav, 6);
                    }
                    else    //if no target, use a fixed speed instead
                    {
                        persistentVariable = x + (128 * image_xscale);
                        xspeed = 1.5 * image_xscale;
                    }
                }
                
                //ready a dash when we start falling
                if (animID == 1 &amp;&amp; yspeed &gt;= 0)
                {
                    animID = 3;
                    animTimer = 0;
                    playSFX(sfxShovelKnightChargeReady);
                        
                    //move up 3 pixels to preserve center of mass
                    if !placeCollision(x, y - 3)
                        y -= 3;
                }
                
                //dash when dash is readied and floor is hit
                if (animID == 3 &amp;&amp; ground)
                {
                    phase = 4;
                    animID = 4;
                    animTimer = 0;
                    playSFX(sfxShovelKnightKingDash);
                    with instance_create(x + (-14 * image_xscale), y + 15, objSingleLoopEffect)
                    {
                        sprite_index = sprInUni_AltCrashWake;
                        image_speed = 1/5;
                        image_xscale = -other.image_xscale;
                    }
                }
                break;
            case 4:
                //dashing
                if (animID == 4)
                {
                    ground = false;
                    xspeed = 8 * image_xscale;
                    //make afterimages
                    if global.roomTimer mod 2 = 0
                    {
                        with instance_create(x, y, objInUni_AfterImage)
                        {
                            sprite_index = other.sprite_index;
                            image_index = other.image_index;
                            image_xscale = other.image_xscale;
                            image_yscale = other.image_yscale;
                            visible = (global.roomTimer mod 4 &gt;= 2);
                        }
                    }
                    //end dash when we hit a wall
                    if xcoll != 0 &amp;&amp; sign(xcoll) == sign(image_xscale)
                    {
                        //rebound from wall
                        xspeed = sign(image_xscale) * -1;
                        yspeed = -3;
                        animID = 1;
                        animTimer = 0;
                        //spawn shockwave
                        if !positionCollision(x + (10 * image_xscale), y - 13)
                        {
                            var i = instance_create(x + (11 * image_xscale), y - 9, 
                                objInUni_AltCrashBombExplosion);
                            i.image_xscale = image_xscale;
                            i.image_yscale = -1;
                        }
                        //play bomb sound
                        playSFX(sfxCommandoBombExplode);
                        playSFX(sfxCommandoQuake);
                        //shake the screen a bit
                        screenShake(12, 2, 0);
                    }
                }
                
                //when landing out of hitting a wall, end attack
                if (animID == 1 &amp;&amp; ground)
                {
                    persistentVariable = 5;
                    phase = 0;
                    animID = 0;
                    animTimer = 0;
                    attackTimer = 0;
                    hasFired = false;
                    delay = 0;
                    image_xscale = -image_xscale; //will probably want to be walking away from the wall
                    break;
                }
                break;
            
            
                
                
            case 5: // downdash
                //face target
                if (delay == 0)
                    calibrateDirection();
            
                //jump so that target is underneath when we reach peak of our jump
                if attackTimer == 1
                {
                    delay = 4;
                    yspeed = jumpY;
                    if instance_exists(target)
                    {
                        xspeed = xSpeedAim(x, y, target.x, y, yspeed, grav, 3) * 2;
                        persistentVariable = target.x;
                    }
                    else    //if no target, use a fixed speed instead
                        xspeed = 0.8 * image_xscale;
                }
                
                //switch to downdash anim when peak is hit
                if (animID == 1 &amp;&amp; yspeed &gt;= 0)
                {
                    playSFX(sfxEnemyBoost);
                    animID = 5;
                    animTimer = 0;
                    if persistentVariable != -1 &amp;&amp; abs(persistentVariable - x) &lt; xspeed * 2
                        shiftObject(persistentVariable - x, 0, true);
                    yspeed = 6;
                    xspeed = 0;
                    grav = 0;
                }
                
                //upon landing...
                if (ground == true)
                {
                    if (animID != 5)
                    {
                        if delay = 0    //wait for stomp animation to finish if necessary
                        {
                            persistentVariable = 3;
                            phase = 0;
                            animID = 0;
                            animTimer = 0;
                            attackTimer = 0;
                            hasFired = false;
                            delay = 0;
                        }
                    }
                    else    //I.E. if animID is 5 when landing...
                    {
                        //change to hard landing animation
                        animID = 6;
                        delay = 24;
                        //produce shockwaves
                        for (var t = -1; t &lt;= 1; t++)
                        {
                            if !positionCollision((x - 3) + (18 * t), y + 12)
                            {
                                var i = instance_create((x - 3) + (14 * t), y + (15 * image_yscale), 
                                    objInUni_AltCrashBombExplosion);
                                i.sprite_index = sprInUniverse_AltCrashBlastHor;
                                i.image_xscale = t;
                                i.image_yscale = image_yscale;
                                i.shotsLeft = 13;
                            }
                        }
                        //return gravity
                        grav = 0.25;
                        //play bomb sound
                        playSFX(sfxCommandoBombExplode);
                        playSFX(sfxCommandoQuake);
                        //shake the screen a bit
                        screenShake(12, 0, 2);
                    }
                }
                break;
        }
        
        //animation system
        animTimer += 1 / animSpeed[animID]; //increment animation
        if animTimer &gt;= animFrames[animID]  //when the animation ends...
        {
            if animLoop[animID]
                animTimer -= animFrames[animID];    //loop animatioon from start
            else
                animTimer = animFrames[animID] - 0.1; //or, hang on last frame until animation changes
        }
        image_index = animStart[animID] + animTimer; //convert to real image_index
        
        
        if floor(image_index) == 8  //change healthbar color alongside own change of color
            healthBarPrimaryColor[1] = 37;
        else
            healthBarPrimaryColor[1] = 24;
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear our projectiles when defeated
with (objHarmfulExplosion)
    instance_destroy();
with (objInUni_CrashBomber)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with(objInUni_AltCrashBombExplosion)
    instance_destroy();


event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//draw_text(x, y - 24, string(attackTimerMax));
//draw_text(x, y - 32, string(1 + (healthpoints &gt; 10)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
