<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprItem4</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stomp on enemies
event_inherited();

contactDamage = 12;

penetrate = 3;
pierces = 2;
attackDelay = 20;

faction = 8;    //had to make a whole new faction for this

blockCollision = true;
grav = gravAccel;

canDamage = false;  //doesn't do damage until ridden

//object-specific
jump = 0;
jumpPeakY = undefined;

active = false;

//vehicle vars
physicsLock = undefined;
riderPhysicsAllowed = false;
weaponsAllowed = true;
shootYOffset = 16;
shootXOffset = 13;

//animation system vars
//see objAltCrashMan for more info
animTimer = 0;
animID = 0;
animIDLast = 0;
//animations: stand, jump, land on ground, walk, fall, land on enemy
animSpeed =  makeArray(99, 99, 10, 10, 99, 10);
animStart =  makeArray(0 , 2 , 1 , 3 , 0 , 1);
animFrames = makeArray(1 , 1 , 1 , 4 , 1 , 2);
animLoop =   makeArray(1 , 1 , 0 , 1 , 1 , 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear locks, reset rider's variables
if (instance_exists(parent) &amp;&amp; physicsLock != undefined)
{
    parent.vehicle = noone;
    lockPoolRelease(physicsLock);
    
    //try to keep megaman from getting stuck in the ceiling
    with(parent)
    {
        y += 16 * image_yscale;
        //compactors just don't count as collision, even if i tell it specifically to check for stuff mega's already colliding with?
        //so we have a hack instead
        if !instance_place(x, y - (20 * image_yscale), objCompactor)
            shiftObject(0, -16 * image_yscale, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sakugarne code
event_inherited();

if !instance_exists(parent)
{
    event_user(10);
    exit;
}

if (!global.frozen)
{
    //handle player getting on armor
    if (!active)
    {
        if (position_meeting(x, y + (6 * image_yscale), parent) 
            &amp;&amp; !parent.isSlide &amp;&amp; !parent.climbing)
        {
            yspeed = 0;
            active = true;
            canDamage = true;
            dontDieToScreenTransitions = true;
            shiftVisible = 2;
            despawnRange = -1;
            
            parent.xspeed = 0;
            parent.yspeed = 0;
            parent.vehicle = id;
            
            physicsLock = lockPoolLock(
                parent.localPlayerLock[PL_LOCK_MOVE],
                parent.localPlayerLock[PL_LOCK_SLIDE],
                parent.localPlayerLock[PL_LOCK_CHARGE],
                parent.localPlayerLock[PL_LOCK_CLIMB],
                parent.localPlayerLock[PL_LOCK_JUMP],
                parent.localPlayerLock[PL_LOCK_GROUND],
                parent.localPlayerLock[PL_LOCK_GRAVITY],
                parent.localPlayerLock[PL_LOCK_SPRITECHANGE]);
        }
    }
    //handle everything that happens once we're in the armor
    else if (global.ammo[playerID, global.weaponID[? objItem4]] &gt; 0)
    {
        //if player is in noclip, move with them
        if global.freeMovement
        {
            x = parent.x;
            y = parent.y;
            exit;
        }
        //if player is iced or timestopped or whatever, don't
        if isLocked(global.playerFrozen)
        {
            xspeed = 0;
            yspeed = 0;
            y -= grav;
            exit;
        }
        
        //move left and right
        if (global.keyRight[parent.playerID] != global.keyLeft[parent.playerID])
            &amp;&amp; !parent.isHit
            xspeed = sign(image_xscale) * 1.5;
        else
            xspeed = 0;
        
        
        if ground
        {
            jumpPeakY = undefined;
            //landing anim
            if jump != 0
            {
                animID = 2;
                animTimer = 0;
                jump = 0;
                playSFX(sfxTimeStopper);    //and landing sound
            }
            //walking &amp; standing anims
            else if animID != 2 || animTimer == animFrames[2]
            {
                if xspeed != 0
                {
                    if animID == 3 &amp;&amp; animTimer mod 2 == 1
                        playSFX(sfxDachoneWalk);    //and walking sound
                    animID = 3;
                }
                else
                    animID = 0;
            }
            //jump when jump is pressed
            if global.keyJumpPressed[parent.playerID] &amp;&amp; jump == 0
            {
                shiftObject(0, -4 * sign(image_yscale), true);
                yspeed = -6 * sign(image_yscale);
                jump = 1;
                animID = 1;
                /*
                with(instance_create(x, y + (32 * image_yscale), objExplosion))
                {
                    sprite_index = sprMetallDaddyJump;
                    image_yscale = other.image_yscale;
                    image_speed = 1/8;
                }
                */
            }
        }
        else //i.e. if !ground
        {
            //track jump height
            if jumpPeakY == undefined
            {
                if sign(image_yscale) &gt; 0
                    jumpPeakY = bbox_bottom;
                else
                    jumpPeakY = bbox_top;
            }
            if sign(image_yscale) &gt; 0
                jumpPeakY = min(jumpPeakY, bbox_bottom);
            else
                jumpPeakY = max(jumpPeakY, bbox_top);
        
            //stop jumping when jump button is released
            if jump == 1
            {
                if !global.keyJump[parent.playerID]
                {
                    yspeed = 0;
                    jump = 2;
                }
                else if (sign(yspeed) * sign(grav) &gt;= 0) //don't stop jump while falling
                    jump = 2;
            }
            
            //walked off edge anim if we're airborne but didn't jump
            if animID != 1 &amp;&amp; animID &lt; 4
            {
                animID = 4;
                jump = 2;
            }
        }
        
        //stop at horizontal section borders (copied from playerMovement script)
        var xdis = x - (view_xview + (view_wview * 0.5));
        var xpos = (view_wview * 0.5) - 16;
        
        if (abs(xdis) &gt; xpos)
        {
            if ((xdis &gt;= 0 &amp;&amp; (!place_meeting(x, y, objSectionArrowRight) || global.lockTransition))
                || (xdis &lt; 0 &amp;&amp; (!place_meeting(x, y, objSectionArrowLeft) || global.lockTransition)))
            {
                x = view_xview + (view_wview * 0.5) + xpos * sign(xdis);
                xspeed = 0;
                
                if (position_meeting(x,y,objSolid) &amp;&amp; blockCollision)
                {   //leave instead of killing player if item 4 gets smushed
                    event_user(10);
                    exit;
                }
            }
        }
        
        //hold player on the cockpit
        parent.x = x;
        parent.y = y - (1 * image_yscale);
        
        //drain ammo
        global.ammo[playerID, global.weaponID[? objItem4]] = max(0,
            global.ammo[playerID, global.weaponID[? objItem4]]
            - (0.025 / (global.energySaver + 1)));
        
        //animation system
        if animID != animIDLast
        {
            animIDLast = animID;
            animTimer = 0;
        }
        animTimer += 1 / animSpeed[animID]; //increment animation
        if animTimer &gt;= animFrames[animID]  //when the animation ends...
        {
            if animLoop[animID]
                animTimer -= animFrames[animID];    //loop animation from start
            else
                animTimer = animFrames[animID]; //or, hang on last frame until animation changes
        }
        image_index = animStart[animID] + min(animTimer, animFrames[animID] - 0.1); //convert to real image_index
    }
    else // Teleport away if out of ammo
    {
        global.ammo[playerID, global.weaponID[? objItem4]] = 0; //0 is 0, energy bar! get it right
        event_user(10);
        exit;
    }
}

if (active)
{
    //follow section switcher when switching sections
    if instance_exists(objSectionSwitcher)
    {
        x = objSectionSwitcher.x;
        y = objSectionSwitcher.y;
    }
    
    //follow parent's image_scale flippings
    if image_yscale != parent.image_yscale
    {
        y += (sprite_get_yoffset(mask_index) - (bbox_bottom - bbox_top)) * sign(parent.image_yscale);
        image_yscale = parent.image_yscale;
        grav = gravAccel * sign(image_yscale);
    }
    image_xscale = parent.image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///while equipped...
if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    if (!instance_exists(objItem4) &amp;&amp; !instance_exists(objItem4Teleport)
    &amp;&amp; global.ammo[playerID, global.weaponID[? objItem4]] &gt; 4)
    {
        i = fireWeapon(26, 0, objItem4Teleport, 1, 0, 0, 0);
        with (i)
        {
            y = view_yview - 40;
            if (image_yscale &lt; 0)
                y += view_hview + 80;
        }
    }
    else if instance_exists(vehicle)//if in vehicle, trigger joe mech shots
        chargeTimer += (chargeTimer == 0);
    else
    {   //buster shots if vehicle is summoned, but we aren't riding it
        with (fireWeapon(16, 0, objNormalBusterShot, 4, 0, 1, 0))
            xspeed = other.image_xscale * 5;
    }
}

//joe mech shots: should be identical to those of the actual enemy
if chargeTimer &gt; 60 || !instance_exists(objItem4)
    chargeTimer = 0;
if chargeTimer != 0
{
    if chargeTimer++ mod 15 == 1
    {
        with (fireWeapon(13, 4, objItem4Shot, 99, 0, 1, 0))
        {
            xspeed = 6 * image_xscale;
            yspeed = (6 - (other.chargeTimer / 15)) * image_yscale;
            playSFX(sfxEnemyShootClassic);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///qualify what counts as 'stomping' an enemy

//don't hit enemies if we're not falling
if (jumpPeakY == undefined) || (sign(yspeed) * sign(grav) &lt;= 0)
    || (sign(image_yscale) &gt; 0 &amp;&amp; other.bbox_top &lt; bbox_bottom - 32)
    || (sign(image_yscale) &lt;= 0 &amp;&amp; other.bbox_bottom &gt; bbox_top + 32)
    || (sign(image_yscale) &gt; 0 &amp;&amp; jumpPeakY &gt;= other.bbox_top) 
    || (sign(image_yscale) &lt;= 0 &amp;&amp; jumpPeakY &lt;= other.bbox_bottom)
{
    global.damage = -1;
    exit;
}

//reduced damage against midbosses
if object_is_ancestor(other.object_index, prtMiniBoss)
    global.damage = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///weapon setup
weaponSetup("ITEM 4", 
    make_color_rgb(220, 0, 204), 
    make_color_rgb(255, 188, 255), 
    sprWeaponIconsItem4, 1.5,   //costs this much weapon energy per second of use
    " You call down and ride a large battle mech, with which you can walk on spikes, and crush foes by jumping on them.## The mech itself is invulnerable, but it does not protect the rider in any way.## The mech has a gun installed, though it is quite weak.",
    "12#-#1#4");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///teleport out when killed
i = instance_create(x, y, objItem4Teleport);
i.upordown = 'up';
i.parent = parent;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make the mech feel the force a bit when it lands on a stronger enemy
if other.healthpointsStart &gt; 3
{
    yspeed = 0;
    animID = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///no deflecty
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///table of offsets for megaman's position

switch(floor(image_index))
{
    case 0:
    case 2:
        imgPlayerY = 0;
        break;
    case 1:
        imgPlayerY = 7;
        break;
    case 3:
    case 5:
        imgPlayerY = 3;
        break;
    case 4:
    case 6:
        imgPlayerY = 2;
        break;
    //default:
    //    printErr("objItem4's image_index out of bounds! " + string(image_index));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw player in cockpit
event_inherited();

if active &amp;&amp; instance_exists(parent) 
    &amp;&amp; ((parent.iFrames mod 4) &lt; 2 || parent.iFrames &lt; 0)
{
    event_user(0);
    if (parent.isHit &amp;&amp; (parent.hitTimer mod 8) &lt;= 3)   //hitspark
        draw_sprite_ext(sprHitspark, 0, 
            round(spriteGetXCenterObject(parent)) - sign(parent.image_xscale),
            round(spriteGetYCenterObject(parent) + (imgPlayerY * image_yscale)), 
            image_xscale, image_yscale, 0, c_white, 1);
    else
    {
        drawPlayer(parent.playerID, parent.costumeID, 8, 12, 
            round(parent.x) - sign(parent.image_xscale), 
            round(parent.y + (imgPlayerY * image_yscale)), 
            parent.image_xscale, parent.image_yscale);
        if parent.hatID != 0
                drawHat(parent.hatID, 8, 12, 
                    round(parent.x) - sign(parent.image_xscale),
                    round(parent.y + (imgPlayerY * image_yscale)), 
                    parent.image_xscale, parent.image_yscale);
    }
    
    //some parts go in front of player
    draw_sprite_ext(sprItem4FG, 0, 
        round(x) + (-9 * image_xscale), 
        round(y) + (imgPlayerY * image_yscale), 
        image_xscale, image_yscale, 0, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
