<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shows your items and stuff
if (instance_number(object_index) &gt; 1) || !instance_exists(objPauseMenu)
{
    instance_destroy();
    exit;
}

link = noone;

phase = 0;
option = 0;

animTimer = 0;

var itemSpacing = 22;

//filler in case you have no items
accName = "Nothing";
accDesc = "You don't have any #items to see."

buttonPos[0, 0] = -9999;
buttonPos[0, 1] = -9999;
var i = 0;

equipNum = array_length_1d(global.equipmentHotbar);
if equipNum != 0
{
    if equipNum &lt;= 3
    {//one row of equipment if there's few items
        var rowoff = ((equipNum * itemSpacing) - 6) / 2;
        for(i = i; i &lt; equipNum; i++)
        {
            buttonPos[i, 0] = 128 + -rowoff + (i * itemSpacing);
            buttonPos[i, 1] = 45;
        }
    }
    else
    {//else, two rows
        var rowwid = ceil(equipNum / 2);
        var rowoff = ((rowwid * itemSpacing) - 6) / 2;
        for(i = i; i &lt; rowwid; i++)
        {
            buttonPos[i, 0] = 128 + -rowoff + (i * itemSpacing);
            buttonPos[i, 1] = 35;
        }
        
        var rowoff = (((equipNum - rowwid) * itemSpacing) - 6) / 2;
        for(var p = 0; i &lt; equipNum; i++)
        {
            p++;
            buttonPos[i, 0] = 128 + -22 + -rowoff + (p * itemSpacing);
            buttonPos[i, 1] = 55;
        }
    }
    
    //grab name &amp; description of first item
    accessoryInfoFetch(global.equipmentHotbar[0]);
}

//item system doesn't need to come in until we're of having the a actual game
itemNum = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior

switch (phase)
{
    case 0: //pan in
        visible = true;
        link.scrollX -= 12;
        if link.scrollX &lt;= -256
        {
            link.scrollX = -256;
            phase = 2;
        }
        break;
    
    case 1: //pan out
        link.scrollX += 12;
        if link.scrollX &gt;= 0
        {
            link.scrollX = 0;
            instance_destroy();
            exit;
        }
        break;
}       //phase 2 for the real menu: done elsewhere
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu movement &amp; cancelling
if phase == 2
{
    // exit with L or B buttons
    if global.keyWeaponSwitchLeftPressed[0] || global.keyShootPressed[0]
    {
        selected = true;
        if link == noone
            phase++;
        else
            phase = 1;
        playSFX(sfxPageSwitch);
        exit;
    }
   
    //cool dynamic thing i made
    var xDir = (global.keyRightPressed[0] - global.keyLeftPressed[0]);
    var yDir = (global.keyDownPressed[0] - global.keyUpPressed[0]);
    
    cursorPos[0] = buttonPos[option, 0];
    cursorPos[1] = buttonPos[option, 1];
    varDir[0] = xDir;
    varDir[1] = yDir;
    
    if (yDir != 0)
    {
        //vertical movement while NOT on the weapon list
        dir = 1;
        
        //slight bias based on the scroll direction 
        //for consistency moving up and down on evenly spaced but offset options
        cursorPos[0] += yDir;
        
        event_user(5);
        
        //if scrolled off the menu, try again from the other side
        /*
        if nearestOption = -1
        {
            cursorPos[1] -= view_hview * yDir * 3;
            event_user(5);
        }
        */
    }
    
    if (xDir != 0)    //same as above
    {
        dir = 0;
        event_user(5);
        
        if nearestOption = -1
        {
            cursorPos[0] -= view_wview * xDir * 3;
            event_user(5);
        }
    }
    
    //toggle equipment enabled
    if (global.keyJumpPressed[0] || global.keyPausePressed[0]) &amp;&amp; option &lt; equipNum
    {
        global.equipmentDisabled[global.equipmentHotbar[option]] ^= 1;
        playSFX(sfxClamp);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///find nearest button

//takes buttonPos, varDir, dir, cursorPos, option. outputs to option

//moving away from an option deconfirms it
confirm = false;

nearestOption = -1;
var closePoints;
var nearestClosePoints = 999999;

for(var p = 0; p &lt; array_height_2d(buttonPos); p++)
{
    //non-options aren't options
    if buttonPos[p, 0] == undefined
        continue;
    
    //don't allow selection of non-weapons while in certain modes
    //(picking weapon for w-tank and weapon rearranging mode)
    if phase &gt;= 6 &amp;&amp; ((p &lt; 10) 
        &amp;&amp; !(phase == 7 &amp;&amp; rHeldWeapon == undefined &amp;&amp; p == 6))
        continue;
    
    //don't allow selecting weapons that are locked
    //(unless in rearrange mode)
    if phase != 7 
        &amp;&amp; p &gt;= 10 &amp;&amp; global.weaponLocked[global.weaponHotbar[p - 10]] &gt;= 1
        continue;

    //draw a plane cutting away all options that aren't in the direction of movement
    if ((buttonPos[p, dir] - cursorPos[dir]) * varDir[dir])
    //offset the plane by the difference in position perpindicular to movement
    /*
    this is to keep it from selecting options that are just slightly further
    to the right than the current one, but very far away vertically,
    that may get selected if you push the edges of the menu
    */
        - abs(cursorPos[!dir] - buttonPos[p, !dir]) &gt; 0
    {
        //buttons get points. more points = bad
        closePoints = abs(cursorPos[dir] - buttonPos[p, dir]);
        //the perpindicular direction is accounted for, but deprioritized
        closePoints += abs(cursorPos[!dir] - buttonPos[p, !dir]) * 3;
        
        //if current button is closer than previous record-setter, replace it
        if (closePoints &lt; nearestClosePoints)
        {
            nearestOption = p;
            nearestClosePoints = closePoints;
        }
    }
}

//-1 means it did not find an option in that direction
if !(nearestOption == -1 || nearestOption == option)
{
    option = nearestOption;
    if option &lt; equipNum
        accessoryInfoFetch(global.equipmentHotbar[option]);
    playSFX(sfxWeaponSwitch);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(link)
{
    drawXPosition = link.x + 256;
    drawYPosition = link.y;
}
else
{   //center display on non-standard resolutions
    drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
    drawYPosition = view_yview[0] + view_hview[0] / 2 - 112;
}
var cntr = view_wview / 2;

//text alignment
draw_set_halign(fa_left);
draw_set_valign(fa_top);

//frame
draw_sprite(sprite_index, 3, drawXPosition, drawYPosition);

/*---------------
   accessories
---------------*/
if equipNum &lt;= 6 //filler squares
    draw_sprite(sprite_index, 4, drawXPosition, drawYPosition);
//draw accessories
if equipNum != 0
{
    for(var i = 0; i &lt; equipNum; i++)
    {
        draw_sprite(sprEquipmentIcons, global.equipmentHotbar[i], 
            drawXPosition + buttonPos[i, 0], drawYPosition + buttonPos[i, 1]);
        if global.equipmentDisabled[global.equipmentHotbar[i]]
            draw_sprite(sprEquipmentDisabled, 0, 
                drawXPosition + buttonPos[i, 0], drawYPosition + buttonPos[i, 1]);
    }
}
else
{   //draw "no item" text
    draw_text(drawXPosition + 100, drawYPosition + 48, "NO ITEM");
}

/*---------
   items
---------*/
//system's not in yet!
draw_sprite(sprite_index, 5, drawXPosition, drawYPosition);
draw_text(drawXPosition + 100, drawYPosition + 120, "NO ITEM");



if phase == 2
{
    //draw cursor
    draw_sprite(sprShopCursor, (animTimer++ / 10) mod 4, drawXPosition + buttonPos[option, 0], 
        drawYPosition + buttonPos[option, 1]);
    
    //draw description
    draw_text(drawXPosition + 32, drawYPosition + 152, accName);
    draw_text(drawXPosition + 32, drawYPosition + 168, accDesc);
}


// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_sprite_ext(sprDot, 0, drawXPosition + 24, drawYPosition + 8, view_wview[0] - 48, view_hview[0] - 16, 0,
        make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue),
        global.coloredTextOverlaysOpacity / 255);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
