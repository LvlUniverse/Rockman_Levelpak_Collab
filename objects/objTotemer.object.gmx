<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTotemerPreview</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>sprTotemer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///What if big pets... was good?
event_inherited();

//respawn = true;
facePlayerOnSpawn = false;

healthpointsStart = 40;
healthpoints = healthpointsStart;
category = "bulky";

contactDamage = 5;

doesIntro = false;

grav = 0;
blockCollision = false;

doesTransition = false;

fnsolid = 1;

sprite_index = sprTotemer;

// Enemy specific code

//@cc the number of parts this guy has
myLength = 4;

//@cc determines the order and position of block movement.
//each entry is a pair of the block that moves and where it moves to, in the order that they move
pattern[0, 0] = 0;
pattern = add1dArrayInto2d(makeArray(3, 208, 2, 208, 1, 208, 0, 208), pattern, 0); //return 1
pattern = add1dArrayInto2d(makeArray(0, 112, 1, 192, 2, 48 , 3, -16), pattern, 1); //extend 1

pattern = add1dArrayInto2d(makeArray(3, 0  , 2, 0  , 0, 0  , 1, 0  ), pattern, 2); //return 2
pattern = add1dArrayInto2d(makeArray(1, 240, 0, 176, 2, 96 , 3, 16 ), pattern, 3); //extend 2

pattern = add1dArrayInto2d(makeArray(1, 208, 0, 208, 2, 208, 3, 208), pattern, 4); //return 3
pattern = add1dArrayInto2d(makeArray(3, 80 , 2, 128, 0, -16, 1, 208), pattern, 5); //extend 3

pattern = add1dArrayInto2d(makeArray(0, 0  , 3, 0  , 2, 0  , 1, 0  ), pattern, 6); //return 4
pattern = add1dArrayInto2d(makeArray(1, 92 , 2, 160, 3, 228, 0, 24 ), pattern, 7); //extend 4

//don't modify
isHead = true;

parts = undefined;  //head vars: the parts don't have these at all
controlTimer = -30;
patternIndex = 1;
winceTimer = 0;
dir = sign(image_xscale);
//if placed facing right, change head to face right, reset image_xscale, and move so that we're in about the same place
image_xscale = 1;
if dir == -1
{
    x -= 16;
    image_index = 2;
}

partTimer = 0;  //part vars: the head is a part too, so it shares these
destX = undefined;
destY = undefined;
srcX = x;
srcY = y;
img = 0;
landed = true;
float = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delete parts if we get deleted for some reason
if parts != undefined
{
    for (var p = 1; p &lt; myLength; p++)
        if instance_exists(parts[p])
            instance_destroy(parts[p]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//head does midboss step event, other parts do entity step event
if (isHead == true)
    event_inherited();

if entityCanStep()
{
    //code for just the head, that controls when and where the parts move
    if (isHead)
    {
        //check to see if all parts are landed
        if controlTimer &lt; 0
        {
            var finished = true;
            for (var c = 0; c &lt; myLength; c++)
            {
                if !parts[c].landed || parts[c].partTimer != 0
                {
                    finished = false;
                    break;
                }
            }
        }
        //start next cycle when check goes through
        if controlTimer &gt;= 0 || finished 
            controlTimer++;
        if (controlTimer &gt;= 0) &amp;&amp; (controlTimer mod 20 == 0)
        {
            var i = floor(controlTimer / 10);
            if i / 2 &lt; myLength
            {   //tell a part to move for each part we have
                var thisPart = parts[pattern[patternIndex, i]];
                thisPart.destX = global.sectionLeft + pattern[patternIndex, i + 1] + 16;
                thisPart.destY = view_yview + 16;
                thisPart.float = (patternIndex mod 2 == 0)
            }
            else
            {   //once we go past total parts, reset timer and go to next pattern
                controlTimer = -30;
                patternIndex++;
                if patternIndex &gt;= array_height_2d(pattern)
                    patternIndex = 0;
            }
        }
    }
    
    
    //code for all parts:
    if destX != undefined
    {
        partTimer++;
        
        //animation
        img += min(partTimer / 40, 1) * (8/12); //one revolution (8 images) every 12 frames
        if isHead
            image_index = floor((img + -dir + 1) mod 8);
        else    //i.e. if !isHead
            image_index = 9 + floor(img mod 2);
        
        //movement
        //try to avoid clipping the player on the return trip
        if (float &amp;&amp; partTimer == 40)
            yspeed = -2;
        //prepare to do zoomin
        if partTimer == 60
        {   
            srcX = x;
            srcY = y;
            grav = 0;
            blockCollision = false;
            landed = false;
            isSolid = 0;
        }
        if partTimer &gt;= 60
        {
            if partTimer &lt;= 80
            {   //zoom from src to dest
                xspeed = (srcX + (((destX - srcX) / 20) * (partTimer - 60))) - x;
                yspeed = (srcY + (((destY - srcY) / 20) * (partTimer - 60))) - y;
            }   
            else    //i.e. if partTimer &gt; 80
            {   //drop and reset vars when we complete movement
                partTimer = 0;
                img = 0;   
                destX = undefined;
                destY = undefined;
                grav = 0.25;
                blockCollision = true;
                xspeed = 0;
                yspeed = 0;
                //head also claibrates facing
                if isHead
                {
                    if instance_exists(target)
                        dir = sign((x + 8) - target.x);
                    if dir == -1
                        image_index = 2;
                    else
                        image_index = 0;
                }
            }
        }
    }
    //play sound, disable falling, and make particles when landing
    if !landed &amp;&amp; ground
    {
        playSFX(sfxHardManLand);
        landed = true;
        grav = 0;
        blockCollision = false;
        isSolid = 2;
    }
}

//if dying, explode parts one by one
if (!global.frozen &amp;&amp; dead &amp;&amp; !instance_exists(objSectionSwitcher) &amp;&amp; killed)
{
    for (var c = 0; c &lt; myLength; c++)
    {
        if instance_exists(parts[c])
        {
            with(parts[c])
            {
                //visible = !visible;
                if other.deadTimer / (60 / other.myLength) &gt; other.myLength - c
                {
                    instance_create(bboxGetXCenter(), bboxGetYCenter(), objBigExplosion);
                    playSFX(sfxMM9Explosion);
                    instance_destroy();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create segments upon spawn
event_inherited();

if (spawned)
{
    if parts == undefined
    {
        parts = 0;
        //head is part 0
        parts[0] = id;
        //creates parts past the head
        for (var p = 1; p &lt; myLength; p++)
        {
            parts[p] = instance_create(x, y + (p * 15), objTotemerPart);
            //you can customize the parts here if you want
        }
    }
    else
        printErr("array 'parts' was already defined upon spawning!");
}
else
{
    //destroy parts on despawn
    parts = undefined;
    event_perform(ev_destroy, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deflects shots while spinning, winces if hurt
if partTimer &gt; 10
    other.guardCancel = 1;
else if winceTimer &lt;= 0
    winceTimer = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup for custom death
event_inherited();

//stop all of the parts
for (var c = 0; c &lt; myLength; c++)
{
    xspeed = 0;
    yspeed = 0;
    grav = 0;
    isSolid = false;
    blockCollision = false;
    contactDamage = 0;
    destX = undefined;
    partTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw order shenanigans

//draw part spikes
for (var p = 0; p &lt; array_length_1d(parts); p++)
    if instance_exists(parts[p])
        draw_sprite(parts[p].sprite_index, (parts[p].image_index mod 2) + 11, parts[p].x, parts[p].y);

//draw part blocks
for (var p = 1; p &lt; array_length_1d(parts); p++)
    if instance_exists(parts[p])
        draw_sprite(parts[p].sprite_index, parts[p].image_index, parts[p].x, parts[p].y);

//draw self
if winceTimer-- &lt;= 20 &amp;&amp; !killed
    draw_sprite(sprite_index, image_index, x, y);
else
{
    if (dir == 1 &amp;&amp; image_index == 0)
        draw_sprite(sprite_index, 8, x, y);
    else if (dir == -1 &amp;&amp; image_index == 2)
        draw_sprite_ext(sprite_index, 8, x + 16, y, -1, image_yscale, 0, c_white, 1);
    else
        draw_sprite(sprite_index, image_index, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
