<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLaserBuster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 4;

contactDamage = 3;
penetrate = 3;
pierces = 2;

image_xscale = sign(image_xscale) * 0.01;

animTimer = 0;

playSFX(sfxGeminiLaser);

hasHitList = makeArray(noone);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen
{
    animTimer++;
    
    //expands while coming out of buster
    if abs(image_xscale) &lt; 1 &amp;&amp; canDamage
    {
        var dir = sign(image_xscale);
        image_xscale = abs(x - xstart) / sprite_get_width(sprite_index);
        image_xscale = min(1, image_xscale) * dir;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///can only hit each enemy once

//for each entry in the list of hit enemies...
var length = array_length_1d(hasHitList);
for (var g = 0; g &lt; length; g++)
{
    //if this enemy matches the entry, cancel the damage and do nothing else
    if other == hasHitList[g]
    {
        global.damage = 0;
        exit;
    }
}
//if we didn't get a match, do damage as normal, but add the enemy to the list
hasHitList[length] = other.id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///comes out of buster gradually
//todo: player colors

//debug: draw hitbox
//draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);

if (animTimer mod 8) &gt;= 5
{   //player colors
    var col1 = global.primaryCol[0];
    var col2 = global.secondaryCol[0];
}
else
{   //player face colors
    var col1 = global.nesPalette[47];
    var col2 = c_white;
}

if !dead
{
    var w, xs, dir, back;
    w = sprite_get_width(sprite_index);
    xs = abs(image_xscale)
    dir = sign(image_xscale);
    if dir &gt; 0
        back = bbox_left;
    else
        back = bbox_right;
    
    //lazor
    draw_sprite_part_ext(sprite_index, 1, round(w - (xs * w)), 0, 
        round(xs * w), 8, round(back), round(bbox_top) - 1, dir, 1, col1, 1);
    draw_sprite_part_ext(sprite_index, 2, round(w - (xs * w)), 0, 
        round(xs * w), 8, round(back), round(bbox_top) - 1, dir, 1, col2, 1);
    //dot
    if abs(image_xscale) &lt; 1 &amp;&amp; canDamage
    {
        draw_sprite_ext(sprLaserBusterPoint, (animTimer / 3 mod 2) + 2, 
            round(xstart), round(y) + (-2 * (image_yscale &lt; 0)), 1, 1, 0, col1, 1);
        draw_sprite_ext(sprLaserBusterPoint, (animTimer / 3 mod 2) + 4, 
            round(xstart), round(y) + (-2 * (image_yscale &lt; 0)), 1, 1, 0, col2, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
