<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEquipMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

phase = 0;
link = 0;

option = 0;
sortOption = 0;
weaponOffset = 0;
offsetTimer = -1;

sortMode = 0;   //todo: sort menu w/ shoulder button

animTimer = 0;
quickScrollTimer = 25;

//cost of equipment piece, by image
equipmentCosts = makeArray(3, 8, 3, 0, 6, 5, 12, 12);
equipmentNames = makeArray("Energy Balancer", "Energy Charger", "Energy Converter", "Normal Item", "Skull Amulet", "Met Helmet", "Energy Saver", "Super Energy##Balancer");
//whether the given equipment piece is active or not, by image. 
//needs to be a global variable later
equipmentActive = allocateArray(array_length_1d(equipmentCosts), false);

//the order the equipment is in in the menu. equipment you haven't bought won't appear
//needs to be a global variable later
equipmentOwned = makeArray(0, 1, 2, 4, 5, 6, 7);
ownedCount = array_length_1d(equipmentOwned);

bpUsed = 0; //only really relevant in this menu, so it may not need to be stored globally
bpOwned = 21; //since this is a collectible, it's gonna have to be made a global var no matter what

bpHundreds = 0; //todo: auto-calculate these
bpTens = 1;

badgesListX = 88;
badgesListY = 8;
badgesDescX = 88;
badgesDescY = 192;
bpTallyX = 24;
bpTallyY = 56;
showModeX = 24;
showModeY = 8;
sortMenuX = 0;  //not implemented yet
sortMenuY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///transitions &amp; option switching
animTimer++;

switch (phase)  //copied from pause menu
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
        {
            phase++;
        }
        break;
    
    // Doing menu selections
    case 2:
        //exit menu with shoot button
        if global.keyShootPressed[0]
        {
            phase++;
            playSFX(sfxElementGrab);
            break;
        }
        
        var xDir = (global.keyRightPressed[0] - global.keyLeftPressed[0]);
        var yDir = (global.keyDown[0] - global.keyUp[0]);
        
        //horizontal is between exit confirmation and list of badges
        if (xDir != 0)
        {
            playSFX(sfxWeaponSwitch);
            option = !option;   //0 becomes 1, &gt;=1 becomes 0
        }
        
        //scrolling in the list of badges
        var doScroll = false;
        if option != 0 &amp;&amp; yDir != 0
        {
            if (quickScrollTimer-- == 25) || (quickScrollTimer == 0)
            {
                doScroll = true;
                if (quickScrollTimer == 0)
                    quickScrollTimer = 8;
            }
        }
        else
            quickScrollTimer = 25;
        if (doScroll)
        {
            option += yDir;
            if option &lt;= 0
                option = ownedCount;
            if option &gt; ownedCount
                option = 1;
            playSFX(sfxWeaponSwitch);
        }
        break;
    
    // Fading out
    case 3:
        if (room == rmEquipmentTest)
        {
            var ID;
            if (global.nextRoom != rmTitleScreen)
            {
                saveLoadOptions(true);
            }
            global.nextRoom = rmTitleScreen;
        }
        else
        {
            global.nextRoom = -1;
            phase++;
        }
        break;
    
    // End fading out
    case 4:
        if (objGlobalControl.fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
        {
            global.nextRoom = 0;
            visible = 0;
        }
        else if (objGlobalControl.fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
        {
            global.frozen = true;
            instance_destroy();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///actual option functions

if phase == 2 &amp;&amp; (global.keyJumpPressed[0] || global.keyPausePressed[0])
{
    switch(option)
    {
        //default: play error since this option does nothing atm
        default:
            playSFX(sfxError);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

// center display on non-standard resolutions
drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
drawYPosition = view_yview[0] + view_hview[0] / 2 - 112;

// draw menu bg
draw_sprite(sprite_index, 0, drawXPosition, drawYPosition);

draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text(x, y, string(option))//debug: draw option

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
