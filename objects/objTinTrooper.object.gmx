<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTinTrooper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 2;

blockCollision = 1;
grav = 0.25;

bubbleTimer = 0;

//object-specific
keyImg = 0;
bumpAnim = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if entityCanStep()
{
    //movement
    if bumpAnim &lt;= 0
    {
        xspeed = image_xscale;
        
        if (ground)
        {
            //if we run into a wall...
            if xcoll != 0
            {
                var waterMod = (inWater * (2/3)) + 1;
                //jump if it's low enough
                if !positionCollision(x + 16 * image_xscale, y + -8 + (-24 * image_yscale * waterMod), false, true)
                    &amp;&amp; !checkSolid(0, -24 * image_yscale * waterMod)
                    yspeed = -4 * sign(image_yscale);
                //else, bomk
                else
                    bumpAnim = 10;
            }
            //jump if we run into a gap
            else if checkFall(16 * image_xscale) 
                &amp;&amp; !positionCollision(x + (16 * image_xscale), y + (32 * image_yscale))
                yspeed = -4 * sign(image_yscale);
        }
    }
    else if bumpAnim &gt; 0
    {   //goes 'bonk!' if it hits a wall it can't jump up
        if (bumpAnim == 10)
        {
            playSFX(sfxTinTrooperBonk);
            yspeed = -2 * sign(image_yscale);
            xspeed = -1.5 * image_xscale;
            bumpAnim--;
        }
        else if (ground)
        {
            //wait for a bit, then turn around
            xspeed = 0;
            if --bumpAnim &lt;= 0
                image_xscale = -image_xscale;
        }
    }
    else    //has just been thrown: move slowly horizontally, return to normal when we land
    {
        xspeed = image_xscale * 0.25;
        if (ground)
            bumpAnim = 0;
    }

    //animation
    keyImg += 1 / 7; //key turns
    
    if bumpAnim &gt; 0
        image_index = 5;
    else if !ground
        image_index = 4;    //hop animation in air
    else
    {   //walking animation on ground
        if image_index &gt;= 4 //reatart from 0 if we were just in the air
            image_index = 0;
        image_index = (image_index + (1/10)) mod 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire weapon
if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    with(fireWeapon(18, 0, objTinTrooper, 3, 1.5, 2, 1))
    {
        //sound
        playSFX(sfxTinTrooper);
        //fall up in reverse gravity
        if image_yscale &lt; 0
            grav = -0.25;
        //hop out of arms if fired in air
        if (!other.ground)
        {
            bumpAnim = -1;
            yspeed = -3 * sign(grav);
        }
        //try to not get stuck in walls
        if checkSolid(0, 0, false, true)
        {
            x -= 10 * image_xscale;
            if checkSolid(0, 0, false, true)
                x -= 11 * image_xscale;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Mega Man's palette
weaponSetup("TIN TROOPER", 
    make_color_rgb(128, 128, 128), 
    c_white, 
    sprWeaponIconsTinTrooper, 1.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///explode upon hitting an enemy

var e = instance_create(x, y, objTinTrooper_Explosion);
e.hasHitList = makeArray(other.id);
playSFX(sfxMM9Explosion);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///explode if deflected

instance_create(x, y, objTinTrooper_Explosion);
playSFX(sfxMM9Explosion);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw windup key independently
var keyOff = (floor(image_index) == 0 || floor(image_index) == 2) - 1;
draw_sprite_ext(sprite_index, (keyImg mod 4) + 6, round(x), round(y + keyOff), 
    image_xscale, image_yscale, image_angle, image_blend, image_alpha);

event_inherited();

//debug: collision check points
/*
var waterMod = (inWater * 1.5) + 1;
draw_sprite(mskPreciseDot, 0, x + 16 * image_xscale, y + -8 + (-24 * image_yscale * waterMod));
draw_sprite(sprite_index, 0, x, y - (24 * image_yscale * waterMod));
draw_sprite(mskPreciseDot, 0, x + (16 * image_xscale), y + (32 * image_yscale));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
