<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprOptionsMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = false;

if (!instance_number(object_index) &gt; 1)
{
    instance_destroy();
    exit;
}

if !instance_exists(objPauseMenu)
    global.nextRoom = -1;

cursorImgIndex = 0;
cursorImgSpd = 0.2;

arrowBlinkTimer = 20;
showArrow = true;

phase = instance_exists(objPauseMenu) * 4;
option = 0;
returnOption = undefined;
returnScroll = undefined;
selected = 0;
buffer = 0;

verticalQuickScrollTimer = 25;
horizontalQuickScrollTimer = 25;

link = noone;
linkFade = !instance_exists(objPauseMenu) * 2;

listW = 128;
listH = 192;
listSurface = surface_create(listW, listH);
listScrollDest = -(listH / 2) + 12;
listScroll = listScrollDest;

maxVisibleOptions = 9;

gearAnimTimer = 0;
gearSurface = surface_create(256, 224);
lightAnimTimer = 0;

// Control settings
newControls = 0;
current = 'NONE';
press = 1;
currentKeys[40]=-1;
keyID = 0;
key = -1;

// Option text
optionText[0, 0] = 'CLOSE';
optionText[0, 1] = 'CONFIGURE# CONTROLS';
optionText[0, 2] = 'CONFIGURE# GAMEPAD';
optionText[0, 3] = 'MUSIC VOLUME';
optionText[0, 4] = 'SOUND VOLUME';

optionText[0, 5] = 'DISPLAY...';
    optionText[1, 0] = 'BACK';
    optionText[1, 1] = 'RESOLUTION';
    optionText[1, 2] = 'V-SYNC';
    optionText[1, 3] = 'SHOW FPS';
    optionText[1, 4] = 'SHOW CONTROLLER';
    optionText[1, 5] = 'DAMAGE POPUP';
    optionText[1, 6] = 'CHARGE BAR';
    optionText[1, 7] = 'ESC KEY BEHAVIOR';
    /*
    optionText[1, 8] = 'test1';
    optionText[1, 9] = 'test2';
    optionText[1, 10] = 'test3';
    optionText[1, 11] = 'test4';
    optionText[1, 12] = 'test5';
    optionText[1, 13] = 'test6';
    optionText[1, 14] = 'test7';
    optionText[1, 15] = 'test8';
    optionText[1, 16] = 'test9';
    optionText[1, 17] = 'testwhatever';
    */

optionText[0, 6] = 'ACCESSIBILITY...';
    optionText[2, 0] = 'BACK';
    optionText[2, 1] = 'MOVING TEXT';
    optionText[2, 2] = 'FLASHING';
    optionText[2, 3] = 'COLORED TEXT# OVERLAYS...';

optionText[0, 7] = 'GAME STYLE...';
    optionText[3, 0] = 'BACK';
    optionText[3, 1] = 'MM COLOR';
    optionText[3, 2] = 'PICKUP EFFECT';
    optionText[3, 3] = 'ITEM GRAPHICS';
    optionText[3, 4] = 'DEATH EFFECT';
    optionText[3, 5] = 'JUMP SOUND';
    optionText[3, 6] = 'TELEPORT SOUND';

//optionText[0, 8] = 'CHEATS...';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior

switch (phase)
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
        {
            phase = 6;
        }
        break;
    
    // Fading out
    case 2:
        var ID;
        if (global.nextRoom != rmTitleScreen)
        {
            saveLoadOptions(true);
        }
        global.nextRoom = rmTitleScreen;
        break;
    
    // End fading out
    case 3:
        if (objGlobalControl.fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
        {
            global.nextRoom = 0;
            visible = 0;
        }
        else if (objGlobalControl.fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
        {
            global.frozen = true;
            instance_destroy();
        }
        break;
    
    case 4: //pan in
        visible = true;
        link.scrollX += 12
        if link.scrollX &gt;= 256
        {
            link.scrollX = 256;
            phase = 6;
        }
        linkFade = link.scrollX / 128;
        link.linkFade = linkFade;
        break;
    
    case 5: //pan out
        global.nextRoom = 0;
        link.scrollX -= 12;
        if link.scrollX &lt;= 0
        {
            link.scrollX = 0;
            instance_destroy();
            exit;
        }
        linkFade = link.scrollX / 128;
        link.linkFade = linkFade;
        break;
    
    /*menu cases:
    main (6)
    display (7)
    accessibility(8)
    game style(9)
    cheat(10)
    */
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Most menu selections

if (phase &gt;= 6 &amp;&amp; !selected &amp;&amp; !instance_exists(objColoredTextOverlaysMenu))
{
    // exit with b button, or by pressing exit option
    if global.keyShootPressed[0] || ((global.keyPausePressed[0] || global.keyJumpPressed[0]) &amp;&amp; option == 0)
    {
        if phase == 6
        {   //quit if in main menu
            selected = true;
            if link == noone
                phase = 2;
            else
                phase = 5;
            playSFX(sfxMenuSelect);
            exit;
        }
        else
        {   //return to main menu if in submenu
            option = returnOption;
            //listScrollDest = returnScroll;
            listScroll = returnScroll + (listScroll - listScrollDest) + -32;
            phase = 6;
            playSFX(sfxMenuSelect);
            exit;
        }
    }
    
    // left / right controlled selections
    xdir = (global.keyRightPressed[0] || (global.keyRight[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0)) - (global.keyLeftPressed[0] || (global.keyLeft[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0));
    if xdir != 0
    {
        switch(option + ((phase - 6) * 100))
        {
            // Music volume
            case 003:
                pre = global.musicvolume;
                global.musicvolume = max(0, min(100, global.musicvolume + 5 * xdir));
                
                // adjust current music volume to reflect change
                switch (global.levelSongType)
                {
                    default:
                    case "OGG":
                        FMODInstanceSetVolume(global.songMemory, global.musicvolume * 0.01);
                        break;
                    case "VGM":
                        if (instance_exists(objMusicControl))
                        {
                            audio_sound_gain(objMusicControl.sound_index, global.levelVolume * (global.musicvolume * 0.01), 0);
                        }
                        break;
                }
                if (global.musicvolume != pre)
                {
                    if (xdir &gt; 0)
                        playSFX(sfxMenuScrollUp);
                    else
                        playSFX(sfxMenuScrollDown);
                }
                break;
            
            // Sound volume
            case 004:
                pre = global.soundvolume;
                global.soundvolume = max(0, min(100, global.soundvolume + 5 * xdir));
                if (global.soundvolume != pre)
                {
                    if (xdir &gt; 0)
                        playSFX(sfxMenuScrollUp);
                    else
                        playSFX(sfxMenuScrollDown);
                }
                break;
            
            // Screensize
            case 101:
                pre = global.screensize;
                setScreenSize(global.screensize + xdir);
                if (global.screensize != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // V-Sync
            case 102:
                global.vsync = !global.vsync;
                playSFX(sfxTextBox);
                break;
            
            // FPS
            case 103:
                pre = global.showFPS;
                global.showFPS = min(max(0, global.showFPS + xdir), 1);
                if (global.showFPS != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Controller Overlay
            case 104:
                pre = global.showControllerOverlay;
                global.showControllerOverlay = min(max(0, global.showControllerOverlay + xdir), 2);
                if (global.showControllerOverlay != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Damage popup
            case 105:
                pre = global.damagePopup;
                global.damagePopup = min(max(0, global.damagePopup + xdir), 1);
                if (global.damagePopup != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Charge Bar
            case 106:
                pre = global.chargeBar;
                global.chargeBar = min(max(0, global.chargeBar + xdir), 1);
                if (global.chargeBar != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Escape key behavior
            case 107:
                pre = global.escapeBehavior;
                global.escapeBehavior = min(max(0, global.escapeBehavior - xdir), 2);
                if (global.escapeBehavior != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // moving text effects
            case 201:
                pre = global.showMovingText;
                global.showMovingText = min(max(0, global.showMovingText + xdir), 1);
                if (global.showMovingText != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // flickering (photosensitivity)
            case 202:
                pre = global.doFlashing;
                global.doFlashing = min(max(0, global.doFlashing + xdir), 1);
                if (global.doFlashing != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // MM Color
            case 301:
                pre = global.mmColor;
                global.mmColor = min(max(0, global.mmColor + xdir), 1);
                if (global.mmColor != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Instant refills
            case 302:
                pre = global.healthEffect;
                global.healthEffect = min(max(0, global.healthEffect + xdir), 1);
                if (global.healthEffect != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Pickup Graphics
            case 303:
                pre = global.pickupGraphics;
                global.pickupGraphics = min(max(0, global.pickupGraphics + xdir), 1);
                if (global.pickupGraphics != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Death Effect
            case 304:
                pre = global.deathEffect;
                global.deathEffect = min(max(0, global.deathEffect + xdir), 1);
                if (global.deathEffect != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Jump Sound
            case 305:
                pre = global.jumpSound;
                global.jumpSound = min(max(0, global.jumpSound + xdir), 1);
                if (global.jumpSound != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
            
            // Teleport Sound
            case 306:
                pre = global.teleportSound;
                global.teleportSound = min(max(0, global.teleportSound + xdir), 1);
                if (global.teleportSound != pre)
                {
                    playSFX(sfxTextBox);
                }
                break;
        }
    }
    
    //start / a controlled options
    if global.keyPausePressed[0] || global.keyJumpPressed[0]
    {
        switch(option + ((phase - 6) * 100))    //if a submenu has more than 100 options then that's user error
        {
            //exit and back buttons are controlled seperately since they share function with the b button
            
            // set keyboard controls
            case 001:
                if (buffer)
                {
                    exit;
                }
                newControls = 1;
                selected = 1;
                current = 'LEFT';
                keyID=0;
                pID = 0;
                for(var i=0;i&lt;40;i++)
                    currentKeys[i]=-1;
                break;
            
            // set gamepad controls
            case 002:
                if (buffer)
                {
                    exit;
                }
                if (!objGlobalControl.joystick_connected)
                {
                    objGlobalControl.joystick_connected = gamepad_get_device_count() &gt; 0;
                }
                if (!objGlobalControl.joystick_connected)
                {
                    playSFX(sfxError);
                    exit;
                }
                newControls = 2;
                keyID=0;
                selected = 1;
                current = 'JUMP';
                pID = 0;
                for(var i=0;i&lt;40;i++)
                    currentKeys[i]=-1;
                break;
            
            case 005:
            case 006:
            case 007: //enter submenus
                playSFX(sfxPause);
                returnOption = option;
                returnScroll = listScrollDest;
                
                listScroll = -(listH / 2) + (listScroll - listScrollDest) + 12 + 32;
                listScrollDest = listScroll;
                
                phase = option + 2;
                option = 0;
                break;
            
            // colored text overlays
            case 203:
                playSFX(sfxPause);
                instance_create(x, y, objColoredTextOverlaysMenu);
                break;
        }
    }
    
    // Up / down controls
    ydir = (global.keyDown[0] - global.keyUp[0]) * ((verticalQuickScrollTimer &lt;= 0)  || (global.keyUpPressed[0] ^^ global.keyDownPressed[0]));
    if ydir != 0
    {
        var opprev = option;
        option += ydir;
        //wrapping
        if (option &lt; 0) || (option &gt;= array_length_2d(optionText, phase - 6))
            option -= array_length_2d(optionText, phase - 6) * ydir;
        playSFX(sfxTextBox);
    }
    
    // vertical quick scroll timer handling
    if (horizontalQuickScrollTimer == 25 // don't quick scroll vertically if doing it horizontally
    &amp;&amp; (global.keyUp[0] ^^ global.keyDown[0]) // only activate quick scroll if one button is being held
    &amp;&amp; !(option &lt;= 0 &amp;&amp; global.keyUp[0]) &amp;&amp; !(option &gt;= array_length_2d(optionText, phase - 6) - 1 &amp;&amp; global.keyDown[0])) // don't wrap around with quick scroll
    {
        if (verticalQuickScrollTimer &lt;= 0)// slight pause between scrolls
            verticalQuickScrollTimer = 7;
        verticalQuickScrollTimer--;
    }
    else
        verticalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    
    // horizontal quick scroll timer handling
    //scrollbars quickscroll faster
    var sliderCheck = option + ((phase - 6) * 100);
    sliderCheck = (sliderCheck == 003 || sliderCheck == 004);
    
    if (verticalQuickScrollTimer == 25 // don't quick scroll horizontally if doing it vertically
    &amp;&amp; (global.keyLeft[0] ^^ global.keyRight[0]))
    {
        if (horizontalQuickScrollTimer &lt;= 0)// slight pause between scrolls
            horizontalQuickScrollTimer = 7 + (sliderCheck * -4);
        horizontalQuickScrollTimer--;
    }
    else
        horizontalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
}

//gear animation
gearAnimTimer += (listScrollDest - listScroll);
//smooth scrolling
listScroll += (listScrollDest - listScroll) / 8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup controls
if (!newControls)
{
    exit;
}

// control configuration
key = -1;

// control configuration
var skip = newControls &amp;&amp; (keyboard_key == vk_delete);

if (newControls == 1)
{
    if (keyboard_check_pressed(vk_anykey))
    {
        // illegal keys
        key = keyboard_key;
        switch (key)
        {
            case vk_f1:
            case vk_f2:
            case vk_f3:
            case vk_f4:
            case vk_f5:
            case vk_f6:
            case vk_f7:
            case vk_f8:
            case vk_f9:
            case vk_f10:
            case vk_f11:
            case vk_f12:
            case vk_escape:
            case vk_alt:
            case vk_nokey:
            case vk_printscreen:
                exit;
        }
    }
    else
    {
        // no keys pressed
        press = 0;
    }
    
    event_user(0);
    
    if (key != -1 &amp;&amp; !press)
    {
        if(skip)
            key=-1;
        currentKeys[keyID + pID*10]=key;
        keyID++;
        // assign key
        press = 1;
        switch (current)
        {
            case 'LEFT':
                if(!skip)
                    global.leftKey[pID] = key;
                current = 'RIGHT';
                break;
            case 'RIGHT':
                if(!skip)
                    global.rightKey[pID] = key;
                current = 'UP';
                break;
            case 'UP':
                if(!skip)
                    global.upKey[pID] = key;
                current = 'DOWN';
                break;
            case 'DOWN':
                if(!skip)
                    global.downKey[pID] = key;
                current = 'JUMP';
                break;
            case 'JUMP':
                if(!skip)
                    global.jumpKey[pID] = key;
                current = 'SHOOT';
                break;
            case 'SHOOT':
                if(!skip)
                    global.shootKey[pID] = key;
                current = 'SLIDE';
                break;
            case 'SLIDE':
                if(!skip)
                    global.slideKey[pID] = key;
                current = 'PREV WPN';
                break;
            case 'PREV WPN':
                if(!skip)
                    global.weaponSwitchLeftKey[pID] = key;
                current = 'NEXT WPN';
                break;
            case 'NEXT WPN':
                if(!skip)
                    global.weaponSwitchRightKey[pID] = key;
                current = 'PAUSE';
                break;
            case 'PAUSE':
                if(!skip)
                    global.pauseKey[pID] = key;
                current = 'LEFT';
                pID += 1;
                if (pID &gt;= global.playerCount)
                {
                    selected = 0;
                    buffer = 1;
                    alarm[0] = 10;
                    newControls = 0;
                    playSFX(sfxUnlocked);
                }
                
                break;
        }
        
        if selected
            playSFX(sfxMenuMove);
    }
}

// gamepad configuration
if (newControls == 2)
{
    if (!objGlobalControl.joystick_connected)
    {
        newControls = 0;
        selected = 0;
        press = 1;
        buffer = 1;
        alarm[0] = 10;
        exit;
    }
    if(!skip)
    {
        var i, b;
        var jID = pID;
        if (!gamepad_is_connected(jID))
            jID += 4 - objGlobalControl.xinputDeviceCount;
        b = gamepad_button_count(jID);
        
        for (i = 0; i &lt; b; i += 1)
        {
            if (gamepad_button_check(jID, i))
            {
                key = i;
                break;
            }
        }
    }
    else
    {
        key=vk_delete;
    }
    if (key == -1)
    {
        press = 0;
    }
    else{
        event_user(0);
    }
    if (key != -1 &amp;&amp; !press)
    {
        if(skip)
            key=-1;
        currentKeys[keyID + pID*10]=key;
        keyID++;
        press = 1;
        switch (current)
        {
            case 'JUMP':
                if(!skip)
                    global.joystick_jumpKey[pID] = key;
                current = 'SHOOT';
                break;
            case 'SHOOT':
                if(!skip)
                    global.joystick_shootKey[pID] = key;
                current = 'SLIDE';
                break;
            case 'SLIDE':
                if(!skip)
                    global.joystick_slideKey[pID] = key;
                current = 'PREV WPN';
                break;
            case 'PREV WPN':
                if(!skip)
                    global.joystick_weaponSwitchLeftKey[pID] = key;
                current = 'NEXT WPN';
                break;
            case 'NEXT WPN':
                if(!skip)
                    global.joystick_weaponSwitchRightKey[pID] = key;
                current = 'PAUSE';
                break;
            case 'PAUSE':
                 if(!skip)
                    global.joystick_pauseKey[pID] = key;
                current = 'JUMP';
                pID += 1;
                if (pID &gt;= 1 &amp;&amp; gamepad_get_device_count() &gt; pID) // global.playerCount
                {
                    selected = 0;
                    buffer = 1;
                    alarm[0] = 10;
                    newControls = 0;
                    playSFX(sfxUnlocked);
                }
                
                break;
        }
        
        if selected
            playSFX(sfxMenuMove);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Validate inputs

if(key != -1 &amp;&amp; !press)
{
    for(var i=0;i&lt;10 &amp;&amp; currentKeys[i+pID*10]!=-1;i++)
    {
        if(currentKeys[i+pID*10]==key)
        {
            key=-1;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

if instance_exists(link)
{
    drawXPosition = link.x - 256;
    drawYPosition = link.y;
}
else
{   //center display on non-standard resolutions
    drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
    drawYPosition = view_yview[0] + view_hview[0] / 2 - 112;
}

var mySub = max(0, phase - 6);

//animated gears
//uses a surface for pixellation at higher resolutions
//assign &amp; clear surface
if !surface_exists(gearSurface)
    gearSurface = surface_create(256, 224);
surface_set_target(gearSurface);
draw_clear_alpha(c_black, 0);

var fade = (floor(max(linkFade - 1, 0) * 3) / 3) * 255;
var gearColor = make_color_rgb(fade, fade, fade);
//gears
//bottom-left group
draw_sprite_ext(sprOptionsGear6, 0, 16, 117, 
    0.6, 0.6, (gearAnimTimer / 6) + 13, gearColor, 1);
draw_sprite_ext(sprOptionsGear8, 0, 45, 154, 
    0.6, 0.6, (-gearAnimTimer / 8) - 3, gearColor, 1);
draw_sprite_ext(sprOptionsGear16, 0, 0, 220, 
    0.6, 0.6, (gearAnimTimer / 16) + 40, gearColor, 1);

//top-right group
draw_sprite_ext(sprOptionsGear12, 0, 220, 40, 
    0.6, 0.6, -gearAnimTimer / 12, gearColor, 1);
draw_sprite_ext(sprOptionsGear6, 0, 248, 92, 
    0.6, 0.6, (gearAnimTimer / 6) + 25, gearColor, 1);

//stragglers
draw_sprite_ext(sprOptionsGear8, 0, 24, 8, 
    0.6, 0.6, -gearAnimTimer / 8, gearColor, 1);

draw_sprite_ext(sprOptionsGear6, 0, 220, 200, 
    0.6, 0.6, -gearAnimTimer / 8, gearColor, 1);

//draw surface
surface_reset_target();
draw_surface(gearSurface, drawXPosition, drawYPosition);

//option list
//assign &amp; clear surface
if !surface_exists(listSurface)
    listSurface = surface_create(listW, listH);
surface_set_target(listSurface);
draw_clear_alpha(c_black, 0);

//text alignment
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// draw options to surface
for (var yoff = 0, j = 0, opt, linecnt; j &lt; array_length_2d(optionText, mySub); j++;)
{
    //darken all draws if option is not the selected one
    if (option == j)
        draw_set_color(c_white);
    else
        draw_set_color(global.nesPalette[0]);

    switch ((mySub * 100) + j)
    {
        // Options with no associated values
        default:
            opt = '';
            break;
        
        // Options with no associated values that take two lines
        case 001:
        case 002:
            opt = ' ';
            break;
            
        // Music volume
        case 003:
            opt += '         ' + string(global.musicvolume) + '%';
            //manually draw a scrollbar
            draw_sprite_ext(sprOptionSlider, 0, 8, yoff + -floor(listScroll + 0.5) + 8, 
                1, 1, 0, draw_get_colour(), 1);
            draw_sprite_ext(sprOptionSlider, 1, 8 + floor(global.musicvolume * (57 * 0.01)), 
                yoff + -floor(listScroll + 0.5) + 8, 1, 1, 0, draw_get_colour(), 1);
            break;
        
        // Sound volume
        case 004:
            opt = '         ' + string(global.soundvolume) + '%';
            draw_sprite_ext(sprOptionSlider, 0, 8, yoff + -floor(listScroll + 0.5) + 8, 
                1, 1, 0, draw_get_colour(), 1);
            draw_sprite_ext(sprOptionSlider, 1, 8 + floor(global.soundvolume * (57 * 0.01)), 
                yoff + -floor(listScroll + 0.5) + 8, 1, 1, 0, draw_get_colour(), 1);
            break;
        
        // Resolution
        case 101:
            if (!window_get_fullscreen())
                opt = string(global.screensize) + 'X';
            else
                opt = 'FULL';
            break;
        
        // V-Sync
        case 102:
            if (global.vsync)
                opt = 'ON';
            else
                opt = 'OFF';
            break;
        
        // FPS display
        case 103:
            if (global.showFPS == 1)
                opt = 'ON';
            else
                opt = 'OFF';
            break;
        
        // controller overlay
        case 104:
            switch (global.showControllerOverlay)
            {
                case 0:
                    opt = 'OFF';
                    break;
                case 1:
                    opt = 'WIDE';
                    break;
                case 2:
                    opt = 'THIN';
                    break;
            }
            break;
        
        // damage popup
        case 105:
            if (global.damagePopup == 1)
                opt = 'ON';
            else
                opt = 'OFF';
            break;
        
        // charge bar
        case 106:
            if (global.chargeBar == 1)
                opt = 'ON';
            else
                opt = 'OFF';
            break;
        
        // esc key function
        case 107:
            switch (global.escapeBehavior)
            {
                case 0:
                    opt = 'QUIT';
                    break;
                case 1:
                    opt = 'PAUSE';
                    break;
                case 2:
                    opt = 'NOTHING';
                    break;
            }
            break;
        
        // moving text effects
        case 201:
            if (global.showMovingText)
                opt = 'ON';
            else
                opt = 'OFF';
            break;
        
        // flashing
        case 202:
            if (global.doFlashing)
                opt = 'ON';
            else
                opt = 'OFF';
            break;
        
        // mega man colors
        case 301:
            if (global.mmColor)
                opt = 'MM9/MM10';
            else
                opt = 'MM1-MM6';
            break;
        
        // health effect
        case 302:
            switch (global.healthEffect)
            {
                case 0:
                    opt = 'FILL';
                    break;
                case 1:
                    opt = 'INSTANT';
                    break;
            }
            break;
        
        // Pickup graphics
        case 303:
            if (global.pickupGraphics)
                opt = 'MM1';
            else
                opt = 'MM2+';
            break;
        
        // Death effect
        case 304:
            if (global.deathEffect)
                opt = 'MM1/MM2';
            else
                opt = 'MM3+';
            break;
        
        // Jump sound       //well, aCtUaLlY it's a landing sound
        case 305:
            if (global.jumpSound)
                opt = 'MM1/MM2';
            else
                opt = 'MM3-6';
            break;
        
        // Teleport sound
        case 306:
            if (global.teleportSound)
                opt = 'MM1/MM2';
            else
                opt = 'MM3-MM6';
            break;
    }
    //draw the option name and value
    draw_text(0, yoff + -floor(listScroll + 0.5), optionText[mySub, j]);
    draw_text(8, yoff + -floor(listScroll + 0.5) + 8, opt);
    
    //indents by 16 if opt is blank, by 24 elsewise
    linecnt = (opt != '') + 1;
    yoff += 8 * (linecnt + 1);
    
    //if this is selected option, set cursor target to center
    if option == j
        listScrollDest = yoff + (-listH / 2) + (-4 * linecnt);
}
draw_set_color(c_white);

//get bottom of list, for arrow detection
listBottom = yoff - (8 * ((opt != '') + 1));

//draw list surface
surface_reset_target();
draw_surface(listSurface, drawXPosition + 64, drawYPosition + 16);

// animate arrows
arrowBlinkTimer -= 1;
if (arrowBlinkTimer == 0)
{
    arrowBlinkTimer = 20;
    showArrow = !showArrow;
}

// draw arrows
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

var headerText = "- OPTIONS -";
switch(phase)
{
    case 7:
        headerText = "- DISPLAY -"; 
        break;
    case 8:
        headerText = "ACCESSIBILITY"; 
        break;
    case 9:
        headerText = "-GAME STYLE-"; 
        break;
    case 10:
        headerText = "- CHEATS -"; 
        break;
}

if (listScroll &lt; 0)
{
    draw_text(drawXPosition + 128, drawYPosition + 8, headerText); 
}
else if (showArrow)
{
    draw_sprite(sprArrow, 2, drawXPosition + 128, drawYPosition + 8);
}

if (listScroll &gt;= listBottom - listH)
{
    draw_text(drawXPosition + 128, drawYPosition + 216, headerText);
}
else if (showArrow)
{
    draw_sprite(sprArrow, 3, drawXPosition + 128, drawYPosition + 216);
}

// draw configure controls popup
if (newControls)
{
    draw_sprite(sprControlconfigureScreen, 0, drawXPosition + 64, drawYPosition + 64);
    draw_set_halign(fa_center);
    if(newControls == 1)
        draw_text(drawXPosition + 128, drawYPosition + 88, 'PRESS KEY FOR');
    else
        draw_text(drawXPosition + 128, drawYPosition + 88, 'PRESS KEY FOR#(PRESS DEL TO SKIP)');
    var playerMod = "";
    playerMod = " (P" + string(pID + 1) + ")";
    draw_text(drawXPosition + 128, drawYPosition + 104, current + playerMod);
}

// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    draw_rectangle(drawXPosition + 64, drawYPosition, drawXPosition + 64 + listW, drawYPosition + view_hview[0], false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
